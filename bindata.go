// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/commands.tmpl
// templates/main.tmpl

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataTemplatesCommandstmpl = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x59\x5b\x73\xdb\x36\x16\x7e\x26\x7f\x05\xca\x49\x3a\x64\x2c\x53\x69" +
	"\xb7\xb3\x0f\xda\x6a\x67\x12\xe7\xe6\x99\xd8\xc9\xda\x4e\xf3\xe0\xf5\x6c\x60\xf2\x48\xc2\x18\x04\x68\x10\xf4\x65" +
	"\x55\xfe\xf7\x9d\x03\x80\x57\x51\xb2\x92\xe9\xcb\xbe\x34\x32\x0e\x78\x2e\xdf\xb9\xa3\xd3\x29\x39\x92\x29\x90\x25" +
	"\x08\x50\x54\x43\x4a\xae\x1f\x89\xcc\x41\xd0\x9c\x1d\x26\x9c\x1d\x3a\x82\x54\x31\x79\xf3\x89\x9c\x7e\xba\x20\x6f" +
	"\xdf\x1c\x5f\xc4\xfe\x74\x4a\xce\x01\xc8\x4a\xeb\xbc\x98\x4d\xa7\x4b\xa6\x57\xe5\x75\x9c\xc8\x6c\x9a\x52\xc1\x80" +
	"\x2f\x35\x7d\xe4\x52\x4d\x47\x79\xf9\x7e\x4e\x93\x1b\xba\x04\x92\x51\x26\x7c\x9f\x65\xb9\x54\x9a\x84\xbe\xb7\x5e" +
	"\x13\xb6\x20\xf1\xb1\x39\x28\xe2\x77\x99\x26\x55\x15\x2c\x32\x1d\xac\xd7\x04\x44\x4a\xaa\x6a\xe3\xd2\xb9\x56\x4c" +
	"\x2c\x0b\xbc\x58\xd8\x9f\x3b\x2e\x5f\xb0\x0c\xf0\xa6\x66\x19\x74\xae\xf9\x5e\xf0\x7d\x26\x4c\x13\xce\x82\xfe\x57" +
	"\xf9\xcd\x72\x0a\x4a\x49\x55\x0c\x08\xaa\x98\xfe\x17\x94\xe4\x72\x39\xe5\x72\x39\x20\x16\xf9\xe2\x97\xbf\x4d\x13" +
	"\x79\xad\xe8\x28\xe5\x8e\xe5\xa0\x0c\x45\xe6\x37\xcb\x98\x89\xe9\xea\x57\x21\xc5\x74\x09\x42\x73\xc8\xa8\x88\xef" +
	"\x7e\x0d\xfc\xc8\xf7\xd7\x6b\x92\xc2\x82\x09\x20\x41\x4e\x15\xcd\x8a\xc0\xd9\x7f\x48\x14\x15\x4b\x20\xf1\xa7\x5c" +
	"\x33\x29\x28\xff\x6c\xc8\x86\x6a\xc8\x6c\x41\xe0\x96\xc4\x17\x8f\x39\x90\xe0\x5a\x4a\x0e\x54\xd8\x8f\x3d\x2f\xc9" +
	"\xd2\xf8\x1d\xa7\xcb\x22\x8c\xe2\xd7\x52\xf2\x10\x41\x8b\x8f\x3e\x1e\x9f\x52\x0b\xe4\x84\x2c\x28\x2f\x60\x42\x0c" +
	"\xe1\x0d\x14\x89\x62\x46\x0e\x12\x23\x27\x01\x78\x01\x7d\x31\x4c\xe8\xbf\xff\x36\x26\xe4\x18\x09\x23\x52\x5e\x7e" +
	"\xaf\x84\x05\x97\x74\x8b\x8c\x77\x96\x34\x26\x25\xde\x47\xce\x26\x47\x1b\x83\x23\x0c\x83\xe0\x09\x7e\x4d\x98\x1e" +
	"\xb6\xb1\xd8\xf1\xd9\x57\xca\x34\x28\xe7\xac\x4d\x67\xdc\x53\xa6\x0f\x91\xbd\xbd\xb7\xdd\x31\x8e\x7e\xbe\xc2\x44" +
	"\xb3\xf2\x7b\x22\x13\xce\xe2\x73\xd0\x47\x65\xa1\x65\x66\x65\x24\x59\x1a\xf9\xbe\xc7\x16\xa4\x2b\xf7\x03\x2d\xdc" +
	"\x4f\xb2\xf6\x3d\xcf\x86\x5a\xfc\x9a\x89\xf4\x73\xf3\x59\x7d\x39\xf2\xbd\xca\xef\x24\xd9\x7a\x4d\x9e\x09\x54\x6f" +
	"\x36\x27\xb1\xd3\xd3\x1c\xd2\x9c\x99\xb3\xf7\x72\x70\xfa\xb9\xbc\xe6\x2c\x31\x34\xfb\xb3\xbd\xe1\xdf\x51\x45\xea" +
	"\x8f\xab\xea\xbc\xbc\x4e\x64\x96\x51\x91\x12\x0c\x61\xdf\x5f\x94\x22\xe9\xd2\x41\xdd\x81\x42\xb5\x2f\xaf\x32\x9a" +
	"\x5f\xda\x52\x71\x65\xff\x41\x53\x14\xe8\x52\x89\x31\xea\xda\xf8\xca\x79\xe4\x59\x61\x18\x19\x95\x1c\x4f\x17\x0f" +
	"\xa3\xdf\x79\x5e\x90\xb6\x9e\x0f\x66\xc6\x1b\x8e\xc7\x30\x26\x26\xf6\x7e\xa9\xf8\xe0\xde\x97\xb3\x8f\x0d\xbd\x9a" +
	"\x58\x6d\xea\xc0\xa9\x7c\x0b\xac\xd3\x4e\xe6\x58\x9f\x90\x21\x2a\xf8\xa9\xfe\xcb\xea\xd8\x85\xc4\x21\x5b\x55\x18" +
	"\x1d\x0d\xaa\x21\x55\xcb\x82\x5c\x3a\x03\x26\xc4\xba\x97\xbc\x30\x55\x28\xfe\x03\xff\x1b\x91\xf0\x45\x5b\x7c\xce" +
	"\xa0\xc8\xa5\xc0\x30\x63\x42\x83\x5a\xd0\x04\xd6\xd5\x84\x98\x3a\x68\x23\x64\x45\x45\xca\x41\x7d\xa6\x7a\x85\x3a" +
	"\x99\x68\xfc\x60\xcf\xea\x50\xf5\x3d\x8c\xb2\x51\x5f\x1a\x0c\xbb\x2c\x2c\x07\x1b\x46\x55\x45\x02\x72\x40\x3a\x64" +
	"\xdf\xf3\x30\x9a\xbd\xd6\x49\x56\xf3\xf7\xa0\xeb\x14\xb5\x24\x93\x80\x6c\x41\xdc\xc5\xf9\x9c\x04\x81\x15\x56\x9f" +
	"\x8c\xc5\xce\x65\xc3\xed\x58\xe8\x9a\xd5\x21\x13\x29\x3c\x04\xd1\xd5\xa5\x71\xdd\x55\xad\x43\xa9\x38\x2a\x60\x2f" +
	"\x1d\x18\xbb\x8d\x05\x68\xb0\xcb\x7e\xe7\x34\x36\x21\xcf\x0c\xd2\xc6\x69\x67\x70\x5b\x32\x05\x69\xb7\x4c\x77\xea" +
	"\xb4\xbd\x19\x1f\x0b\xac\xf3\x7a\x55\xd7\x37\x23\x6e\x4e\x5c\x07\x8c\xcf\x20\xe7\x34\x81\xb0\x54\xdc\x54\x80\x6f" +
	"\xeb\x6f\xc6\xd5\xee\x6b\x87\xfc\x7a\xfd\xad\xfa\x66\x6a\x05\xfa\xfd\x12\xe9\x68\xef\xd5\x84\xfc\x12\xd5\x52\xeb" +
	"\x40\xeb\xd7\x0b\x4f\xc1\x2d\x6a\x8b\x75\xe3\x88\x33\x10\x3a\x46\x03\x4f\x40\xaf\x24\x5e\x09\x23\x8c\x5a\x14\x1f" +
	"\xf9\xbd\xf4\xd9\xcb\xd6\x4d\x53\x6f\x4b\x50\x8f\x8d\xad\x28\x7c\x4e\x14\xdc\xc6\xaf\xd2\xf4\x5f\x48\xb2\xa5\xb7" +
	"\xad\x7d\x7d\x7b\x9c\x31\xdd\x2e\xd1\xe1\xbd\x02\x9a\x82\x1a\x67\xfe\xc1\xd0\xf6\xe4\xde\x22\xd5\x01\xea\x89\x06" +
	"\xec\xf5\xf2\x0f\x41\x71\x25\xf5\x3d\x68\x24\x99\x66\xf6\x27\xd1\x4c\x73\x93\xa0\xc3\x16\x63\x84\xdb\xec\xe9\xb0" +
	"\xf9\xc9\x84\xaf\xf9\xf8\x94\x71\x3c\xb1\xc5\xa8\xd3\xee\x37\x51\xdd\x03\xd6\x45\xa6\xe3\xf3\x5c\x31\xa1\x17\x61" +
	"\xf0\xfc\x2e\x98\xf4\xe5\x46\x51\x23\xa5\xdb\x90\x47\x40\xde\x07\xe5\xef\x10\x56\x23\xef\x6d\x06\xaa\x1b\x00\x8f" +
	"\xa8\xf8\x40\xef\xe0\xb5\x4c\x1f\xdd\xd5\x6b\x99\x3e\x9a\x4a\x55\xc7\xf1\x7b\xd0\x48\xb6\x6a\x9c\x40\xca\xa8\x01" +
	"\xbf\xe7\x71\x0e\x62\x18\xb5\x55\x35\xbb\xaa\xbd\x80\xdc\x7e\x9a\x13\xc1\xb8\x03\xdc\x75\x15\xc1\xf8\xc4\xfe\xc7" +
	"\x4e\x88\xf1\x57\x45\xf3\x10\x94\x9a\x90\xe0\x8b\xa0\xd7\x1c\x88\x96\x64\x09\x9a\xa0\x56\xd6\xa9\x46\x7b\x64\x8a" +
	"\x47\xc8\xb5\xae\x50\xe3\xd8\x1d\x49\xa1\x41\xe8\x43\xd4\xb9\x1e\x3a\x7a\x46\xe0\xcc\x90\x3e\xba\x32\x88\x3c\xa3" +
	"\x16\xb0\x0e\x5e\x88\x84\xad\xcf\xaf\x61\x21\x15\x84\x9d\xf2\x5a\x37\x84\x09\x0a\x8f\x6c\x19\x28\xf2\x06\x44\xd4" +
	"\xe8\x8d\x0c\x5d\x69\x1d\x62\xb1\x07\x14\x08\x2c\x14\x9a\x2c\x28\xe3\x90\x1a\x18\x8c\x4e\xd8\xea\x53\x48\x64\x0a" +
	"\x69\xb7\xcf\xf8\x56\x10\xea\x10\x9f\x6b\xaa\xcb\xc2\x2c\x33\xbf\x93\xdf\x5e\xbe\xb4\x32\x9d\x1a\xce\xc1\x5f\x44" +
	"\x46\x55\xb1\xa2\xbc\xee\x5a\xa1\x55\xff\x67\xc7\x3b\xfa\xc7\x0f\x3a\xd0\xb1\xe5\x38\x4a\x28\xc7\xbb\x6b\x84\x41" +
	"\xd9\xa8\x5b\x5b\x61\x15\xb2\x38\xbf\x5a\x68\x50\xdb\x60\x46\xfd\x6a\xf5\x2c\xe0\x46\x9f\x1e\xc1\x68\xb6\x39\x6b" +
	"\xb9\x8a\x7b\x6f\x46\x3f\x53\x6e\xbb\xd3\xe4\x5f\x34\x0c\x18\x38\x0c\x56\x54\x6b\xc8\x72\x8d\x82\x5e\xfa\x9e\xb7" +
	"\x90\x8a\xd4\x47\xbf\x1b\x41\x56\x91\xf8\x95\x3d\x2c\x9a\xaa\xe4\x6e\x1d\x1c\xf8\x36\x4c\x7a\x96\x39\xf7\x8d\x29" +
	"\xda\x4c\x37\x03\x95\x6b\x4d\x9f\x4a\xca\x4d\x4f\x1e\xc9\x92\xa7\x44\x48\x4d\x12\xca\x39\x71\xc8\x35\x33\x55\x37" +
	"\x2f\x31\x24\x69\xa2\x4b\xca\x7b\x11\xe9\x28\x19\xd5\xc9\xca\x0e\xa2\x5e\xb7\xfb\x99\x73\xe7\x8c\x13\xfb\xbb\xee" +
	"\x03\x9e\xe5\x66\x2d\x6e\x0a\x92\xb9\xf4\x07\xe5\x25\xd8\xb2\x74\x0e\x1c\x12\x6d\x6b\x92\x09\x47\xd7\x2d\x5e\x71" +
	"\x7e\x0e\x5a\x63\xef\x0f\xa3\x8d\xb8\xf1\xb6\x00\xb1\x0f\x12\x58\x94\x6a\xb5\xef\x50\x11\x8b\x82\x83\xc1\x33\xa4" +
	"\xae\xd2\x46\x63\xab\xec\x05\xe6\xb2\x51\xf5\xf2\xea\xfa\x51\x43\x88\x87\x6f\x1f\x72\x48\x34\xa4\xe4\x4f\x62\x6b" +
	"\x3b\x09\x9e\xdf\x62\x5f\x88\x26\x0e\xd0\x1f\xd1\xf7\xab\xd3\xd0\x02\x8f\xa9\x57\xaa\x46\xd3\xa6\x19\x59\xaa\xe3" +
	"\xd5\x8c\x19\xa6\x76\xe0\xc6\xe8\xbe\x6a\x7a\xd4\x40\xdc\x5b\xfc\x67\x11\x06\x36\x8b\x48\x42\x05\xe2\xa3\x80\x26" +
	"\x2b\x92\x42\x81\x1d\x81\x14\x86\xd5\x35\x24\xb4\x2c\x80\x3c\x2f\x08\x2b\xc8\xf3\xa2\xae\xc7\x5d\xef\xed\xc6\xa2" +
	"\x51\xb1\xb3\x70\x62\xcf\x52\x40\x6f\x5a\x5a\xd3\xf6\xbc\xaa\x3f\x83\xe0\x5f\x9a\x65\x10\x9f\x73\x80\x3c\xb4\x0b" +
	"\x28\xa7\xd8\xfa\x5e\xd8\x73\x48\xa4\x48\x9b\x02\xcb\x16\x4d\xae\xfe\x73\xbe\x33\x59\xfb\x90\x9c\xc2\x7d\x18\x9c" +
	"\xd0\x07\x96\x95\x59\xcd\xa1\x20\xf0\x90\x00\xa4\xdd\x02\xde\x56\xd1\x41\x99\x1a\x6c\x69\x67\xb0\x64\x05\x56\xc3" +
	"\xa2\xbf\xce\x99\x55\x42\x49\xa9\xeb\x52\x7e\x26\xa5\xb6\xcb\x69\xd1\x5f\x16\xcc\xa5\x39\xf9\xd9\xbc\xa8\xc4\x47" +
	"\x96\x62\x34\xff\x52\xc0\xac\xb7\x3c\xd8\x85\xca\xac\xc4\x96\x10\x5f\xb8\x29\xcb\x52\x3e\x4a\xb1\x9c\xb9\x98\x56" +
	"\x37\xa9\xbc\x17\xe1\xe8\x2a\x3f\xf1\x9b\x36\xba\xb9\xc0\xcc\x89\x56\x25\xf8\x75\x10\xae\x5d\x87\x45\xfd\xdd\x36" +
	"\x3e\x1f\xc8\xee\xde\x40\x15\x9a\xbc\xda\xa5\x83\xef\xd9\x87\x03\x33\xeb\xf4\x1e\x0d\xd0\x91\x88\xda\x56\x44\xf0" +
	"\x42\x1f\x0a\xfc\x9e\x98\xfa\x4d\x12\x50\x9a\x32\x41\xe0\x0e\x84\x26\x52\x35\x01\x8e\xa3\x01\xb1\x6e\x65\x62\xd9" +
	"\x05\x2c\x78\xcd\x65\x72\x83\x51\x00\x49\x69\x14\x44\x1c\xca\x02\x0a\x92\x4b\xdb\x23\xb5\x24\x39\x28\x26\x53\x86" +
	"\x75\xf6\x91\x24\x2b\x48\x6e\x7e\x40\x62\xe5\x1c\x8e\x73\x90\x33\x2c\x44\x73\x06\x3b\xc7\x96\x0e\xe8\xd9\x1e\xe8" +
	"\x5e\x32\xea\xb7\x8c\x76\x69\xc4\xe0\xb6\x89\x98\x64\xe9\x16\x08\x3b\x61\x15\x7f\x29\xda\xd8\x69\x46\xed\xf8\x15" +
	"\x67\x14\x6d\x6f\x72\xd8\x1d\xcc\x9a\xce\xea\x18\xf5\x56\x85\x8d\xaf\x3c\xcf\xc8\xe8\x08\x18\x8e\xbe\xf5\xe3\xc0" +
	"\x08\xa1\x1b\xe3\xcd\x13\x90\xbb\xbb\x2d\xca\x4d\xe8\xd5\xe1\x8d\x6a\xab\x65\x31\x23\x16\x81\x13\x26\x30\xe3\x4f" +
	"\xf1\x2c\xac\xa7\xe2\xb6\x1d\x6f\x6c\x75\x35\x8f\xb3\x52\xcc\x08\x82\x1e\x22\xa2\x2f\x7a\x70\xda\x19\xbb\x01\xa5" +
	"\x76\x4a\x77\x86\x7b\x7a\x5a\x69\x5a\xff\xc8\x24\xe7\x79\x1e\x97\xcb\xf8\x1d\xd5\x94\x87\x11\x56\x73\xec\x1d\x51" +
	"\x7c\x52\x2c\xc3\xc0\xd4\x76\xd3\xf0\x31\xb6\xa2\x1a\x4f\xbf\x0b\xab\xfd\x0b\xef\x74\xe3\xcd\x3d\x93\xd9\xf2\x8b" +
	"\x05\x90\x9b\x66\x52\xbf\xc1\xb6\xb0\xd4\x1b\x4a\x18\xf5\x5f\x70\xba\x55\x7b\xcf\x87\x9c\x7e\xe0\x8e\xc7\x6d\x3d" +
	"\x8a\xc0\x03\xcd\x72\x0e\x85\x7b\x1a\xf0\xfb\x03\x09\x3c\x18\xfe\x6f\xeb\x4b\x2e\x62\x9a\x8f\x0e\xe6\x24\x20\xe6" +
	"\x95\xa5\xa9\x49\xce\x70\x1c\x54\xc3\x88\x1c\x90\xc0\xf8\xa5\xd1\xd7\xa5\x81\x39\x84\x07\x52\x55\xff\x16\xc1\x66" +
	"\x73\xda\x91\x51\x5b\x12\x6a\x5b\x3e\x6d\x4d\xa7\x9d\xd9\xb4\x91\x4c\xc3\x94\xa9\x26\x23\xdb\xe5\xae\x44\xda\x33" +
	"\x8f\x6a\x33\x3e\xb0\x34\x05\xd1\x88\xb3\x7f\xce\xcc\x54\xd0\x90\x46\x55\x70\xae\x9a\x35\x8e\xb5\xb7\x9e\x4c\xcf" +
	"\x6d\x49\xf9\x23\x39\x59\x1b\x71\x0a\x90\x16\xf5\x32\xd5\x1d\x9b\xf6\x1d\xe1\x77\x0c\xee\x23\xd3\xcf\x7f\xfe\x12" +
	"\xa6\x7d\x3f\x8f\x8e\x99\x4f\x16\x8a\xc4\x2d\x7b\x83\xd5\xa0\x99\x8a\x07\x8b\xe7\x3b\xa9\x32\x9c\x8e\x94\xfb\x15" +
	"\xee\x58\x38\x77\x09\x77\x7c\x50\x72\x77\xbb\x6c\xc5\x8e\x0d\x00\xd6\x23\xb7\x9f\x9b\x2a\x31\xb6\x32\xf8\x4d\x1a" +
	"\x8c\x3e\xd4\x75\xd2\x7b\xf4\xc9\xae\x27\xe3\x32\xd8\x78\x68\x0c\xae\xc8\x7c\xf0\x6a\xd6\x0a\xec\x94\x85\x9d\x8b" +
	"\xd5\xf0\x65\xa7\x9f\xe3\x1b\x36\xb3\x45\xe7\x29\xed\xc9\xff\x5d\xd2\xf6\x1b\xef\xde\x04\xfd\x6c\xde\x56\x94\xc6" +
	"\xc6\xfb\xed\xb5\xb6\xaf\xce\xb3\xc2\x8c\xfa\xd2\x4e\x1d\x98\x88\xdd\x56\xbe\xcf\xaa\xd7\x72\x68\x97\xbd\x06\xe2" +
	"\xd1\x0d\x6f\x7b\x38\xef\x0c\xaa\xa7\x57\xbd\x6e\x84\x35\xf8\xcc\x09\xcd\x73\x30\x03\x97\xc9\xb2\xcd\xd7\x3a\xb7" +
	"\xcd\x45\x23\xe3\xca\x08\x60\x2c\x9d\x0c\x50\xdb\x88\xb0\xff\x77\xdc\xf2\x4e\x7a\xb0\xb4\x49\x0b\x63\xd4\x0e\x90" +
	"\x76\x0f\x40\x2e\x94\xdb\xa2\xe7\xfc\x71\xbf\x73\x12\xda\x61\x97\x5b\x6f\xcd\x86\xd7\x1a\x52\xf5\x47\xa2\x41\x19" +
	"\xb5\xad\xca\xfc\x1e\xce\xe3\xcd\x7c\x34\x3e\x1e\x59\x0e\x66\x28\x6a\x4b\x41\xe5\xff\x2f\x00\x00\xff\xff\x57\x08" +
	"\x56\x81\x99\x20\x00\x00")

func bindataTemplatesCommandstmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatesCommandstmpl,
		"templates/commands.tmpl",
	)
}



func bindataTemplatesCommandstmpl() (*asset, error) {
	bytes, err := bindataTemplatesCommandstmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/commands.tmpl",
		size: 8345,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552176310, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplatesMaintmpl = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8e\x41\x4b\xc3\x40\x10\x85\xcf\x3b\xbf\x62\xc8\x41\x12\xb0\x9b\x7a" +
	"\xed\xad\x68\x0e\x5e\xac\x88\x78\x5f\x37\x93\xed\x60\x76\x66\xd9\x6c\x4a\x25\xe4\xbf\x4b\x2a\xe2\xed\xbd\xf7\xf1" +
	"\x1e\x2f\x39\xff\xe5\x02\x61\x74\x2c\x00\x1c\x93\xe6\x82\x35\x98\x2a\x70\x39\xcf\x9f\xd6\x6b\x6c\x7b\x27\x4c\x63" +
	"\x28\xee\x7b\xd4\xdc\x6a\x22\x71\x89\x77\x7e\xe4\x5d\x20\xa1\xec\x8a\xe6\xd6\x8f\x5c\x41\x03\x30\xcc\xe2\x6f\x63" +
	"\x75\x83\x0b\x18\x3f\xb2\x7d\x16\x2e\xf5\xdd\xa6\x1e\x55\x06\x0e\x0b\x18\x73\x4c\xe9\xc5\x45\x3a\x20\x62\xb5\x2c" +
	"\x68\x37\x83\xeb\x5a\xdd\x83\x31\x9d\x5c\x5e\x33\x0d\x7c\x3d\xfc\xb3\x4e\x2e\x7f\xf8\x83\xf2\xc4\x2a\xb7\xea\x83" +
	"\xdd\xdb\xfd\x96\xae\x0d\x80\x69\x5b\x7c\x3f\x3d\x9d\x0e\x78\xec\x7b\xcc\x14\x78\x2a\x94\xd1\x6b\x8c\x4e\xfa\x09" +
	"\xcf\x94\xc9\xc2\xef\xa7\x37\xd5\x62\xbb\x2b\xf9\xb9\x50\xdd\xc0\x0a\x3f\x01\x00\x00\xff\xff\xd7\x90\x9c\xb4\x08" +
	"\x01\x00\x00")

func bindataTemplatesMaintmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatesMaintmpl,
		"templates/main.tmpl",
	)
}



func bindataTemplatesMaintmpl() (*asset, error) {
	bytes, err := bindataTemplatesMaintmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/main.tmpl",
		size: 264,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1538448749, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"templates/commands.tmpl": bindataTemplatesCommandstmpl,
	"templates/main.tmpl":     bindataTemplatesMaintmpl,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"templates": {Func: nil, Children: map[string]*bintree{
		"commands.tmpl": {Func: bindataTemplatesCommandstmpl, Children: map[string]*bintree{}},
		"main.tmpl": {Func: bindataTemplatesMaintmpl, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
