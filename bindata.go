// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/commands.tmpl
// templates/main.tmpl

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataTemplatesCommandstmpl = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x5b\x6f\xdb\x46\x13\x7d\x26\x7f\xc5\x7c\x84\xbf\x80\xac\x65\x12" +
	"\x41\xdf\x54\xe8\x21\xb5\x73\x03\x62\x3b\xf5\xa5\x2f\xae\x01\xaf\xc8\x11\xb5\xcd\x72\x97\xde\x5d\xb9\x51\x09\xfe" +
	"\xf7\x62\x76\x79\x93\x2d\xa7\x36\xd0\x00\x49\xa4\x9d\xe1\x9c\x33\xe7\xcc\x8e\x98\x65\x70\xac\x0a\x84\x12\x25\x6a" +
	"\x66\xb1\x80\xe5\x16\x54\x8d\x92\xd5\xfc\x28\x17\xfc\xa8\x0b\x28\x9d\xc2\xc9\x39\x9c\x9d\x5f\xc1\xfb\x93\xcf\x57" +
	"\x69\x98\x65\x70\x89\x08\x6b\x6b\x6b\x33\xcf\xb2\x92\xdb\xf5\x66\x99\xe6\xaa\xca\x0a\x26\x39\x8a\xd2\xb2\xad\x50" +
	"\x3a\xdb\x5b\x2b\x0c\x6b\x96\x7f\x63\x25\x42\xc5\xb8\x0c\x43\x5e\xd5\x4a\x5b\x88\xc3\x20\x5a\x6e\x2d\x9a\x28\x0c" +
	"\x22\x94\xb9\x2a\xb8\x2c\xb3\x3f\x8d\x92\x74\x20\xd1\x66\x04\x47\x9f\x8d\xd5\x5c\x96\x26\x0a\xc3\x20\x7a\x1d\x74" +
	"\x96\x0b\x1e\xed\x3e\x65\xea\xd5\xdb\x9f\xb3\x5c\x2d\x35\xdb\x1b\x79\xe0\x35\xea\x47\x11\x6d\xb2\xbf\x51\x2b\xa1" +
	"\xca\x4c\xa8\x32\x0a\x93\x30\x6c\x1a\x38\x90\xac\x42\x98\x2f\x20\x3d\xa3\x0f\x6d\xeb\x0e\x59\xcd\xdd\xd9\x47\xd5" +
	"\x9f\x86\xab\x8d\xcc\xa1\x8f\xb5\xed\x25\xea\x07\xd4\x26\x4e\xe0\xe6\xb6\x62\xf5\x8d\x6f\xef\xd6\xff\x07\x4d\x18" +
	"\x68\xb4\x1b\x2d\xf7\x45\x9b\x30\x08\x9a\x06\x34\x93\x25\xc2\x81\x71\x85\x1c\x5a\x57\x93\xe0\x82\x20\xd8\xfb\x5c" +
	"\x10\x44\x05\x9a\x5c\xf3\xda\x72\x25\xa3\x39\x44\x44\xc9\xd7\x48\x4f\xc6\x08\xb4\x6d\x34\xf3\xf9\x1b\x2d\x1e\xe5" +
	"\x5d\x5f\x7c\x19\xe2\xed\xcc\xb3\x41\x59\x38\xdc\x36\x7c\xda\xeb\x05\x96\xdc\x58\xd4\xb1\xd9\x2c\x73\x55\x55\x4c" +
	"\x16\xb0\x54\x4a\x24\xae\x4f\xa5\x2c\xb1\xcf\x05\x4f\x2f\x94\xb2\x61\x18\xf0\x15\x4c\x32\x89\xb6\x4b\x5a\xc0\x1b" +
	"\xe7\x58\x7a\xec\x23\xae\x9f\x6b\x83\x1d\x39\xe9\x95\xf6\xb4\x2e\xd7\x4a\x5b\x1f\x48\xaf\xb8\x15\x63\xe4\x8b\x92" +
	"\xe5\xdc\xa1\x9d\x32\xfd\xad\x50\x7f\xc9\xd8\x65\x3d\x6a\x3e\xa1\x64\xea\x07\x50\x18\x74\x24\x7a\x86\xa9\x2b\x0e" +
	"\x8b\x47\xd5\xa7\x19\x04\x02\x8b\x17\xa0\x90\x60\xe1\xc4\x4d\x55\xd3\xcc\x52\x94\x0c\x3d\xef\xbf\x75\x9e\x3a\x5d" +
	"\x63\x27\xdb\x64\x04\xd2\x73\x57\x8f\x89\xaf\x4c\xb3\xaa\xb7\x3f\x78\x60\x9a\x3c\x18\x67\xd0\x7d\xbb\xda\xd6\xd8" +
	"\x65\x8c\xae\x85\x5d\x3a\x7e\x67\x55\x2d\xd0\x80\x1f\x98\x70\x07\xe6\x00\xbf\x3b\x52\xef\xfb\xa4\x0e\x67\x78\xe8" +
	"\x70\x01\x11\x40\x04\x87\x83\x97\xbd\x53\x5f\x99\x5d\xc7\x09\x1c\x42\xe4\xa6\x62\x68\x32\xbd\x36\x3d\x31\xaa\xde" +
	"\xb6\x7f\xd0\xb5\x7f\xcc\x2c\xaf\x0a\x02\xde\x63\xfe\xe8\x7e\x57\xa9\x9b\xd9\xa9\xfb\xde\xac\x21\xf4\x9c\xfd\xce" +
	"\xb1\xde\xf7\x20\xe8\x9a\x9c\x0f\x92\xf8\xe3\x77\xba\x34\x73\xf0\x44\x4e\xb9\xe4\xd5\xa6\x3a\xa3\xb3\xb8\x69\x40" +
	"\xa0\x84\xf4\x02\xef\x37\x5c\x63\x31\x58\xd1\xd5\xbb\xd8\xc8\x39\x90\x7d\x31\x75\xf3\xd3\x4e\x2b\x33\x60\xba\x34" +
	"\x70\xd3\x5d\xd3\xce\xde\x20\x18\x6f\xb6\x5b\x47\xe9\x47\xb4\x97\x2e\x23\x8e\x7c\x88\xc6\x87\xfe\xd0\x7d\xf1\xb9" +
	"\x8b\x05\x44\x51\xff\x7c\x5f\x60\xb1\x6f\xed\xdc\x0c\x35\x3f\x4b\xdb\x17\x3c\xe2\xb2\xc0\xef\x51\x72\x7b\xe3\x6e" +
	"\xfd\xad\xaf\xe3\x5d\x08\x82\x8d\x16\x44\xc6\xa7\x1e\x3a\xd5\xc8\x58\x37\xfb\x3e\x63\x9c\x15\x3e\x83\x83\x9a\x34" +
	"\x70\x23\xf3\x44\x95\x8e\x60\xd3\x00\x5f\x01\xde\x77\xb9\xe9\x67\x09\x51\xcd\xec\x3a\x1a\x53\x1c\xea\xa2\x1b\x48" +
	"\x93\x5e\x60\x2d\x58\x8e\xf1\x46\x8b\x19\xf9\x7b\xd7\xdc\xb5\x2d\xb5\xe7\x0b\x74\x93\xde\x34\x77\xed\x1d\x59\xee" +
	"\x94\xbd\xa1\x38\x35\x7f\x3b\x83\xb7\xc9\x08\xdd\xaf\xac\xe0\xc9\xc4\x05\x81\xc6\xfb\x7e\x29\x1d\x0b\x8e\xd2\xa6" +
	"\xd4\xee\x29\xda\xb5\xa2\xac\x38\xa1\x25\x48\x2c\x92\xff\xb0\xf5\xfb\x0d\xea\xed\xb4\x77\x62\xb1\x00\x8d\xf7\xe9" +
	"\xbb\xa2\xf8\x8d\xa2\x7e\x58\xcf\xfa\x55\xf7\xa8\xbf\x69\x73\xb4\xb5\x9e\x20\xac\x91\x15\xa8\x9f\x85\xf8\xe4\xc2" +
	"\x2f\xc7\xf8\x81\x80\xff\xb6\x9d\xdc\xd4\xee\xae\xa7\xff\x2d\x86\x0d\x75\xc6\x85\xdb\x0b\x3d\xcb\x41\xad\xfd\x3a" +
	"\xbd\x40\xa8\x55\x65\xd3\xcb\x5a\x73\x69\x57\x71\xf4\xff\x87\x68\xb6\x0b\x9e\x24\x13\xa8\x89\x76\xcf\xa8\xf6\x12" +
	"\xd9\x5e\x85\x38\x51\x32\x78\x5e\x51\xbe\x82\xf4\x98\xc9\x4f\xec\x01\x7f\x55\xc5\x76\x7c\x64\xa9\x8a\xed\x0c\x50" +
	"\xeb\x7e\x68\x3f\xa2\xa5\x0c\xcf\xe9\x14\x0b\xce\xba\xc5\x3f\xf1\x73\xcf\xc2\x6a\xdb\xf9\x60\x30\x09\xa0\x35\xb9" +
	"\x22\xb9\x18\xad\x10\xaa\x4c\x3f\x30\xcb\x44\x9c\xa4\xef\xb5\x8e\x51\xeb\x24\x3d\x35\x65\x1c\x5d\x4b\xb6\x14\x08" +
	"\x56\x41\x89\x16\x88\x52\xbf\xa0\x86\x15\x42\x45\x29\x40\x55\x27\x8b\x6a\xbf\x9c\xc7\x4a\x5a\x94\xf6\x88\x98\x47" +
	"\x33\x78\xda\x4a\x92\x52\x8f\xdd\x4e\xa4\xb2\xc9\x8f\x15\xd4\x68\xea\x41\x25\x02\x3b\x51\xf1\xb8\x42\xf7\x34\xfb" +
	"\x7c\xaf\x24\x1b\x1a\x0b\x2b\xc6\x05\x16\x7d\x9f\x3d\x10\xfd\x96\x16\x98\xab\x02\x0b\xe0\xd2\xa2\x5e\xb1\x1c\x9b" +
	"\x76\x07\xaa\x33\xea\x5a\x56\x4c\x9b\x35\x13\xb1\x67\xf7\xa6\x7b\x2e\xf9\xe5\x75\x84\x86\x3a\x82\xde\x1f\xa9\x96" +
	"\x92\x06\x9f\xe1\x47\xc0\x1f\x94\xae\x98\xb5\xa8\xbb\x4f\x71\x0f\xec\x52\x5a\xff\x72\x47\xff\xd0\xbb\x17\xd9\xd2" +
	"\xfd\x5a\xd1\x0f\x58\x12\xbe\xe4\x05\x24\xaf\x8a\xf4\x83\x60\xa5\x89\x93\xd4\x9b\xf4\x3b\xd3\x5f\xe3\x37\x3b\xd7" +
	"\xc0\xfb\x6a\xc4\xa6\x9c\xde\x9d\xa8\xff\xbb\xff\x9d\x69\xf7\xce\xb4\x64\xe2\x78\xd0\x86\xff\x04\x00\x00\xff\xff" +
	"\x12\xc7\x6f\x2f\xe2\x0c\x00\x00")

func bindataTemplatesCommandstmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatesCommandstmpl,
		"templates/commands.tmpl",
	)
}



func bindataTemplatesCommandstmpl() (*asset, error) {
	bytes, err := bindataTemplatesCommandstmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/commands.tmpl",
		size: 3298,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1538546898, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplatesMaintmpl = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8e\x41\x4b\xc3\x40\x10\x85\xcf\x3b\xbf\x62\xc8\x41\x12\xb0\x9b\x7a" +
	"\xed\xad\x68\x0e\x5e\xac\x88\x78\x5f\x37\x93\xed\x60\x76\x66\xd9\x6c\x4a\x25\xe4\xbf\x4b\x2a\xe2\xed\xbd\xf7\xf1" +
	"\x1e\x2f\x39\xff\xe5\x02\x61\x74\x2c\x00\x1c\x93\xe6\x82\x35\x98\x2a\x70\x39\xcf\x9f\xd6\x6b\x6c\x7b\x27\x4c\x63" +
	"\x28\xee\x7b\xd4\xdc\x6a\x22\x71\x89\x77\x7e\xe4\x5d\x20\xa1\xec\x8a\xe6\xd6\x8f\x5c\x41\x03\x30\xcc\xe2\x6f\x63" +
	"\x75\x83\x0b\x18\x3f\xb2\x7d\x16\x2e\xf5\xdd\xa6\x1e\x55\x06\x0e\x0b\x18\x73\x4c\xe9\xc5\x45\x3a\x20\x62\xb5\x2c" +
	"\x68\x37\x83\xeb\x5a\xdd\x83\x31\x9d\x5c\x5e\x33\x0d\x7c\x3d\xfc\xb3\x4e\x2e\x7f\xf8\x83\xf2\xc4\x2a\xb7\xea\x83" +
	"\xdd\xdb\xfd\x96\xae\x0d\x80\x69\x5b\x7c\x3f\x3d\x9d\x0e\x78\xec\x7b\xcc\x14\x78\x2a\x94\xd1\x6b\x8c\x4e\xfa\x09" +
	"\xcf\x94\xc9\xc2\xef\xa7\x37\xd5\x62\xbb\x2b\xf9\xb9\x50\xdd\xc0\x0a\x3f\x01\x00\x00\xff\xff\xd7\x90\x9c\xb4\x08" +
	"\x01\x00\x00")

func bindataTemplatesMaintmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatesMaintmpl,
		"templates/main.tmpl",
	)
}



func bindataTemplatesMaintmpl() (*asset, error) {
	bytes, err := bindataTemplatesMaintmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/main.tmpl",
		size: 264,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1538448749, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"templates/commands.tmpl": bindataTemplatesCommandstmpl,
	"templates/main.tmpl":     bindataTemplatesMaintmpl,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"templates": {Func: nil, Children: map[string]*bintree{
		"commands.tmpl": {Func: bindataTemplatesCommandstmpl, Children: map[string]*bintree{}},
		"main.tmpl": {Func: bindataTemplatesMaintmpl, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
