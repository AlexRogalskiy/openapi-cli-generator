// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/commands.tmpl
// templates/main.tmpl

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataTemplatesCommandstmpl = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\xdf\x6f\xdb\x36\x10\x7e\xa6\xfe\x0a\x8e\xc8\x02\x69\x73\x64\x14" +
	"\x7b\xf3\xe0\x87\x2e\x45\xd3\x02\x4d\x9a\x39\xcd\x5e\x8c\x00\xa1\xa5\xb3\xcc\x55\x22\x95\x13\x95\xcd\x10\xf4\xbf" +
	"\x0f\x47\x4a\x96\x9c\x28\x6d\x0a\x2c\x40\x12\x9b\x77\xbc\xef\xbb\xef\x7e\x48\xa5\x4c\xbe\xca\x0c\x78\x21\x95\x0e" +
	"\x02\x55\x94\x06\x2d\x0f\x03\x26\x36\x7b\x0b\x95\x08\x98\x00\x9d\x98\x54\xe9\x6c\xfe\x77\x65\x34\x1d\x68\xb0\xf3" +
	"\x9d\xb5\x25\x7d\xae\x2c\x2a\x9d\x55\x22\x08\x98\xc8\x94\xdd\xd5\x9b\x38\x31\xc5\x3c\x95\x5a\x41\x9e\x59\xb9\xcf" +
	"\x0d\xce\x4d\x09\x5a\x96\xea\x2c\xc9\xd5\x59\x06\x1a\x50\x5a\x83\xf3\x24\x57\xe2\xf8\x56\x55\x6e\xdf\xfc\x36\x4f" +
	"\xcc\x06\xe5\xa4\xe5\x51\x95\x80\x22\x88\x82\xa0\x69\xf8\x89\x96\x05\xf0\xc5\x92\xc7\x57\xf4\xa1\x6d\xdd\xa1\x2c" +
	"\x95\x3b\xbb\x30\xfd\x69\xb0\xad\x75\xc2\x7b\x5b\xdb\xde\x00\x3e\x02\x56\x61\xc4\xd7\x77\x85\x2c\xd7\x3e\x83\x3b" +
	"\xff\x8f\x37\x01\x43\xb0\x35\xea\x29\x6b\x13\x30\xd6\x34\x1c\xa5\xce\x80\x9f\x54\x2e\x90\x43\xeb\x62\x12\x1c\x63" +
	"\x6c\xf2\x1e\x63\x22\x85\x2a\x41\x55\x5a\x65\xb4\x58\x70\x41\x94\x7c\x8c\xf8\xdd\x60\xe1\x6d\x2b\x66\xde\xbf\xc6" +
	"\xfc\x89\xdf\xed\xea\xd3\xc1\xde\xce\x3c\x1b\xd0\xa9\xc3\x6d\x83\xe7\xb9\xae\x20\x53\x95\x05\x0c\xab\x7a\x93\x98" +
	"\xa2\x90\x3a\xe5\x1b\x63\xf2\xc8\xe5\x69\x8c\x25\xf6\x49\xae\xe2\x95\x31\x36\x08\x98\xda\xf2\x91\x27\xd1\x76\x4e" +
	"\x4b\x7e\xea\x8a\x12\x9f\x7b\x8b\xcb\xe7\xb6\x82\x8e\x9c\xf6\x4a\x7b\x5a\x37\x3b\x83\xd6\x1b\xe2\x2f\xca\xe6\x83" +
	"\xe5\x93\xd1\xd9\xc2\xa1\x5d\x4a\xfc\x9a\x9a\x7f\x74\xe8\xbc\x9e\x24\x1f\x91\x33\xe5\xc3\x21\xaf\xc0\x91\xe8\x19" +
	"\xc6\x2e\x38\x5f\x3e\x89\x3e\xf6\x20\x10\xbe\x7c\x05\x0a\x09\x16\x8c\xaa\x69\x4a\x6a\x4b\xb2\x52\x41\x3f\xf7\xdf" +
	"\xba\x9a\x3a\x5d\x43\x27\xdb\xa8\x05\xe2\xcf\x2e\x9e\xcc\xaf\x25\xca\xa2\x2f\x3f\x7b\x94\x48\x35\x18\x7a\xd0\x7d" +
	"\xfb\xb2\x2f\xa1\xf3\x18\xaa\x46\xdf\x92\x22\x25\xcc\x09\x89\x07\x8d\xe3\xdb\x6a\x10\xf2\x48\x63\x2f\xc9\xc1\xf4" +
	"\x92\xc8\x4e\x97\x5e\x5d\xc6\xde\x62\x56\x2d\xb8\x47\xbc\x54\x5a\x15\x75\x71\x45\x67\x61\xd3\xf0\x1c\x34\x8f\x57" +
	"\xf0\x50\x2b\x84\xf4\x90\x59\x77\x71\x55\xeb\x05\x27\x35\x42\xa2\xfd\xcb\x11\xe7\x19\x97\x98\x55\x7c\xdd\x75\x7d" +
	"\xa7\x16\x63\xc3\xa0\xb8\x01\x8e\x2f\xc0\xde\x38\x8f\x50\x78\x13\x55\x83\x7e\xa8\xfd\xbc\xef\x72\xc9\x85\xe8\xef" +
	"\xf7\x01\x96\x53\x53\xbc\x3e\xc4\xfc\xa8\x6d\x1f\xf0\x4c\xe9\x14\xfe\x15\xd1\xdd\xda\x0d\xd1\x9d\x8f\xe3\xe5\x66" +
	"\xac\xc6\x9c\xc8\x78\xd7\x5f\x9d\x3c\xd7\xd2\xee\x5c\x2b\x79\x8f\xa1\x2d\xd4\x8c\x9f\x94\xa4\x81\x6b\x8b\x67\xaa" +
	"\x74\x04\x9b\x86\xab\x2d\x87\x87\xce\x37\xfe\xa8\xb9\x28\xa5\xdd\x89\xc1\xc5\xa1\x2e\x79\xb7\x2f\xe3\x15\x94\xb9" +
	"\x4c\x20\xac\x31\x9f\x51\x21\xef\x9b\xfb\xb6\xa5\xf4\x7c\x80\xae\x71\x9a\xe6\xbe\xbd\xa7\xda\x3a\x65\xd7\x64\xa7" +
	"\xe4\xef\x66\xfc\x4d\x34\x40\xf7\x1b\x80\x3d\x6b\x2d\xc6\x10\x1e\xfa\x19\x3f\xcf\x15\x68\x1b\x53\xba\x97\x60\x77" +
	"\x86\xbc\xc2\x88\x76\x0a\xb1\x88\xfe\xc7\xd4\x1f\x6a\xc0\xfd\x38\x77\x62\xb1\xe4\x08\x0f\xf1\xdb\x34\xfd\x93\xac" +
	"\xbe\x2b\xaf\xfa\xcd\xf1\x24\xbf\x71\x72\xb4\x04\x9e\x21\xec\x40\xa6\x80\x2f\x42\x7c\x70\xe6\xd7\x63\x7c\x43\xc0" +
	"\xef\x0d\xbb\xeb\xda\xe3\x69\xff\x69\x79\x18\xf8\x2b\x95\xbb\xf9\xef\x59\x1e\xd4\x9a\xd6\xe9\x15\x42\x6d\x0b\x1b" +
	"\xdf\x94\xa8\xb4\xdd\x86\xe2\xe7\x47\x31\x3b\x06\x8f\xa2\x11\xd4\x48\xbb\x17\x54\x7b\x8d\x6c\x3f\x84\x38\x52\x92" +
	"\xbd\xac\xa8\xda\xf2\xf8\x5c\xea\x0f\xf2\x11\xfe\x30\xe9\x7e\xb8\xb2\x31\xe9\x7e\xc6\x01\xb1\x6f\xda\x0b\xb0\xe4" +
	"\xe1\x39\x5d\x42\xaa\x64\xb7\x47\x47\xf5\x9c\x58\x58\x6d\xbb\x38\x14\x98\x04\x40\xa4\xaa\x68\x95\x0f\xa5\x28\xa5" +
	"\x56\x49\x08\x88\xd1\x81\xee\x70\x81\x78\xd0\x8d\xd1\x12\x9a\x96\xea\xdc\x68\x0b\xda\x9e\x11\x2b\x31\xe3\xcf\x69" +
	"\x46\x31\xf1\xef\xf6\x1d\x85\x8d\xbe\xad\x0e\x42\x55\x1e\x14\x20\xb0\x77\x26\x1c\xd6\xe3\x44\x22\x4f\xf3\xe8\x03" +
	"\xd1\x53\x28\x85\xc4\xa4\x90\x72\xa5\x2d\xe0\x56\x26\xd0\xb4\x47\xa1\x3a\x91\x6f\x75\x21\xb1\xda\xc9\x3c\xf4\xe8" +
	"\xa7\xdd\xbd\xe8\xf7\x1f\x01\xa4\x48\xef\x0d\x16\xd2\x5a\xc0\xee\x53\xd8\x47\x72\x2e\xad\x7f\x71\xa1\x3f\xf4\x5e" +
	"\x41\x3a\x76\x8f\x0e\x7a\x9a\xf8\x0d\xf4\xbd\x79\x4b\x8a\x34\x7e\x9f\xcb\xac\x0a\xa3\xd8\xab\xfa\x97\xc4\xeb\xf0" +
	"\xf4\xa8\x27\x7d\x21\xaa\xbc\xce\xc6\x8d\x2c\xfa\xdf\xe9\xf7\x81\xe3\x06\x6e\x49\xf5\xe1\xa0\x0d\xfe\x0b\x00\x00" +
	"\xff\xff\x5a\x46\x79\x7d\x29\x0b\x00\x00")

func bindataTemplatesCommandstmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatesCommandstmpl,
		"templates/commands.tmpl",
	)
}



func bindataTemplatesCommandstmpl() (*asset, error) {
	bytes, err := bindataTemplatesCommandstmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/commands.tmpl",
		size: 2857,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1538369923, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplatesMaintmpl = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8e\x41\x4b\xc3\x40\x10\x85\xcf\x3b\xbf\x62\xc8\x41\x12\xb0\x9b\x7a" +
	"\xed\xad\x68\x0e\x5e\xac\x88\x78\x5f\x37\x93\xed\x60\x76\x66\xd9\x6c\x4a\x25\xe4\xbf\x4b\x2a\xe2\xed\xbd\xf7\xf1" +
	"\x1e\x2f\x39\xff\xe5\x02\x61\x74\x2c\x00\x1c\x93\xe6\x82\x35\x98\x2a\x70\x39\xcf\x9f\xd6\x6b\x6c\x7b\x27\x4c\x63" +
	"\x28\xee\x7b\xd4\xdc\x6a\x22\x71\x89\x77\x7e\xe4\x5d\x20\xa1\xec\x8a\xe6\xd6\x8f\x5c\x41\x03\x30\xcc\xe2\x6f\x63" +
	"\x75\x83\x0b\x18\x3f\xb2\x7d\x16\x2e\xf5\xdd\xa6\x1e\x55\x06\x0e\x0b\x18\x73\x4c\xe9\xc5\x45\x3a\x20\x62\xb5\x2c" +
	"\x68\x37\x83\xeb\x5a\xdd\x83\x31\x9d\x5c\x5e\x33\x0d\x7c\x3d\xfc\xb3\x4e\x2e\x7f\xf8\x83\xf2\xc4\x2a\xb7\xea\x83" +
	"\xdd\xdb\xfd\x96\xae\x0d\x80\x69\x5b\x7c\x3f\x3d\x9d\x0e\x78\xec\x7b\xcc\x14\x78\x2a\x94\xd1\x6b\x8c\x4e\xfa\x09" +
	"\xcf\x94\xc9\xc2\xef\xa7\x37\xd5\x62\xbb\x2b\xf9\xb9\x50\xdd\xc0\x0a\x3f\x01\x00\x00\xff\xff\xd7\x90\x9c\xb4\x08" +
	"\x01\x00\x00")

func bindataTemplatesMaintmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatesMaintmpl,
		"templates/main.tmpl",
	)
}



func bindataTemplatesMaintmpl() (*asset, error) {
	bytes, err := bindataTemplatesMaintmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/main.tmpl",
		size: 264,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1538448749, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"templates/commands.tmpl": bindataTemplatesCommandstmpl,
	"templates/main.tmpl":     bindataTemplatesMaintmpl,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"templates": {Func: nil, Children: map[string]*bintree{
		"commands.tmpl": {Func: bindataTemplatesCommandstmpl, Children: map[string]*bintree{}},
		"main.tmpl": {Func: bindataTemplatesMaintmpl, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
