// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/commands.tmpl
// templates/main.tmpl

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataTemplatesCommandstmpl = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x5b\x4f\xe4\xb8\x12\x7e\x4e\x7e\x45\x1d\x8b\x33\x4a\x0e\x4d\x5a" +
	"\xa3\xf3\xd6\xab\x7e\x98\x85\xb9\x49\x03\xcc\x72\xd9\x17\x16\x09\x77\x52\x9d\xb6\xc6\xb1\x83\xe3\x66\x87\x8d\xf2" +
	"\xdf\x57\x65\x3b\x97\x86\x66\x96\x91\x16\x09\x75\xe2\x2a\xd7\xe5\xfb\x3e\x97\x33\x9f\xc3\xb1\x2e\x10\x4a\x54\x68" +
	"\xb8\xc5\x02\x56\x8f\xa0\x6b\x54\xbc\x16\x47\xb9\x14\x47\xc1\xa0\x4d\x06\x27\xe7\x70\x76\x7e\x05\xef\x4f\x3e\x5f" +
	"\x65\xf1\x7c\x0e\x97\x88\xb0\xb1\xb6\x6e\x16\xf3\x79\x29\xec\x66\xbb\xca\x72\x5d\xcd\x0b\xae\x04\xca\xd2\xf2\x47" +
	"\xa9\xcd\x7c\x6f\xac\x38\xae\x79\xfe\x8d\x97\x08\x15\x17\x2a\x8e\x45\x55\x6b\x63\x21\x89\x23\xb6\xae\x2c\x8b\x23" +
	"\xd6\x58\x23\x54\xd9\xb0\x38\x8e\xd8\xcf\xc5\x9e\xe7\x52\xb0\xdd\x5d\xa6\x99\xff\x85\x46\x4b\x5d\xce\xa5\x2e\x9f" +
	"\x18\x9b\x7a\xfd\xf6\xff\xf3\x5c\xaf\x0c\xdf\x6b\x79\x10\x35\x1a\x16\xa7\x71\xdc\xb6\x70\xa0\x78\x85\xb0\x58\x42" +
	"\x76\x46\x0f\x5d\xe7\x16\x79\x2d\xdc\xda\x47\xdd\xaf\xc6\xeb\xad\xca\xa1\xb7\x75\xdd\x25\x9a\x07\x34\x4d\x92\xc2" +
	"\xcd\x6d\xc5\xeb\x1b\xdf\xde\xad\xff\x81\x36\x8e\x0c\xda\xad\x51\xfb\xac\x6d\x1c\x45\x6d\x0b\x86\xab\x12\xe1\xa0" +
	"\x71\x81\x5c\xb6\x10\x93\xd2\x45\x51\xb4\x77\x5f\x14\xb1\x02\x9b\xdc\x88\xda\x0a\xad\xd8\x02\x18\x95\xe4\x63\x64" +
	"\x27\xa3\x05\xba\x8e\xcd\xbc\xff\xd6\xc8\x27\x7e\xd7\x17\x5f\x06\x7b\x37\xf3\xd5\xa0\x2a\x5c\xde\x2e\x7e\xde\xeb" +
	"\x05\x96\xa2\xb1\x68\x92\x66\xbb\xca\x75\x55\x71\x55\xc0\x4a\x6b\x99\xba\x3e\xb5\xb6\x54\x7d\x2e\x45\x76\xa1\xb5" +
	"\x8d\xe3\x48\xac\x61\xe2\x49\x65\x3b\xa7\x25\xbc\x71\xa4\x64\xc7\xde\xe2\xfa\xb9\x6e\x30\x14\xa7\x3c\xd2\xbe\xac" +
	"\xcb\x8d\x36\xd6\x1b\xb2\x2b\x61\xe5\x68\xf9\xa2\x55\xb9\x70\xd9\x4e\xb9\xf9\x56\xe8\x3f\x55\xe2\xbc\x9e\x34\x9f" +
	"\x92\x33\xf5\x03\x28\x1b\x74\x45\xf4\x15\x66\x2e\x38\x2c\x9f\x44\x9f\x7a\x50\x12\x58\xbe\x22\x0b\x01\x16\x4f\xd8" +
	"\xd4\x35\x69\x96\xac\x44\xe8\x79\xff\x16\x38\x75\xb8\x26\x0e\xb6\x89\x04\xb2\x73\x17\x8f\xcb\xaf\xdc\xf0\xaa\xa7" +
	"\x3f\x7a\xe0\x86\x38\x18\x35\xe8\xde\xae\x1e\x6b\x0c\x1e\x23\x6b\x71\x70\xc7\xef\xbc\xaa\x25\x36\xe0\x05\x13\xef" +
	"\xa4\x39\xc0\xef\xae\xa8\xf7\xbd\x53\xc8\x33\x6c\x3a\x5c\x02\x03\x60\x70\x38\x70\xd9\x33\xf5\x95\xdb\x4d\x92\xc2" +
	"\x21\x30\xa7\x8a\xa1\xc9\xec\xba\xe9\x0b\xa3\xe8\x5d\xf7\x87\x62\xcf\x2b\xcb\xab\x82\x12\xef\x21\x7f\x64\x3f\x44" +
	"\x0a\x9a\x6d\xdb\x23\x10\x6b\xc8\xde\x49\xc1\x9b\xb1\xd2\x28\xbc\x2f\xe0\x66\xe7\x48\xf8\x0d\x01\xcc\xa7\x7b\xa2" +
	"\xc8\xc5\x1f\x83\x7b\xef\x5e\xef\x51\x7f\x06\x9e\x2d\x4f\x25\xe8\x15\x33\x84\x78\x49\x83\x4e\x36\xbd\xf8\xa2\x28" +
	"\x20\xbd\x18\x78\xf1\xcb\xef\x4c\xd9\x2c\xc0\xa3\x71\x2a\x94\xa8\xb6\xd5\x19\xad\x25\x6d\x0b\x12\x15\x64\x17\x78" +
	"\xbf\x15\x06\x8b\x41\x0f\x21\xde\xc5\x56\x2d\x80\x34\x94\x10\xa4\xff\xdb\xc1\x73\x06\xdc\x94\xcd\x00\x4c\xd0\x58" +
	"\x14\x8d\xe3\xc5\x8d\xbd\xec\x23\xda\x4b\xe7\x91\x30\x6f\x22\x0d\xd3\x1f\x1d\x5a\xef\xbb\x5c\x02\x63\xfd\xfe\x3e" +
	"\xc0\x72\xdf\xec\xbb\x19\x62\x7e\x56\xb6\x0f\x78\x24\x54\x81\xdf\x59\x7a\x7b\xe3\x46\xcf\x6d\xc0\x38\xf6\xbf\x5b" +
	"\x23\xa9\x18\xef\x7a\xe8\x50\x23\x75\xb9\x03\x18\x07\x76\x7a\xc1\x8a\x19\x1c\xd4\x84\x81\xd3\xed\x33\x54\x06\x36" +
	"\x49\x2b\x78\x1f\x7c\xb3\xcf\x0a\x58\xcd\xed\x86\x4d\x24\x40\x59\x97\xe1\x54\x34\xd9\x05\xd6\x92\xe7\x98\x6c\x8d" +
	"\x9c\x11\xbf\x77\xed\x5d\xd7\x51\x7b\x3e\x40\x38\x6e\x6d\x7b\xd7\xdd\x11\xe5\x0e\xd9\x1b\xb2\x53\xf3\xb7\x33\x78" +
	"\x9b\x8e\xa9\xa7\x3a\xda\x95\x7d\x14\x19\xbc\xef\x27\xe3\xb1\x14\xa8\x6c\x46\xed\x9e\xa2\xdd\x68\xf2\x4a\x52\x9a" +
	"\xc4\x54\x45\xfa\x2f\xb6\x7e\xbf\x45\xf3\x38\xed\x9d\xaa\x58\x82\xc1\xfb\xec\x5d\x51\xfc\x46\x56\x2f\xd6\xb3\x7e" +
	"\xde\x3e\xe9\x6f\xda\x1c\x8d\xce\x67\x19\x36\xc8\x0b\x34\x2f\xa6\xf8\xe4\xcc\xaf\xcf\xf1\x03\x00\xff\x69\x44\x3a" +
	"\xd5\xee\xce\xc8\xff\x2c\x87\x31\x79\x26\xa4\x1b\x4e\x7d\x95\x03\x5a\xfb\x71\x7a\x05\x50\xeb\xca\x66\x97\xb5\x11" +
	"\xca\xae\x13\xf6\xdf\x07\x36\xdb\x4d\x9e\xa6\x93\x54\x13\xec\x5e\x40\xed\x35\xb0\xfd\x54\xc6\x09\x92\xd1\xcb\x88" +
	"\xd2\x60\x3d\xe6\xea\x13\x7f\xc0\x5f\x75\xf1\x38\x6e\x59\xe9\xe2\x71\x06\x68\x4c\x2f\xda\x8f\x68\xc9\xc3\xd7\x74" +
	"\x8a\x85\xe0\xe1\xf6\x99\xf0\xb9\x67\x60\x75\xdd\x62\x20\x98\x00\x30\x86\x58\x51\x42\x8e\x54\x48\x5d\x66\x1f\xb8" +
	"\xe5\x32\x49\xb3\xf7\xc6\x24\x68\x4c\x9a\x9d\x36\x65\xc2\xae\x15\x5f\x49\x04\xab\xa1\x44\x0b\x54\x52\x3f\xa0\x86" +
	"\x11\x42\x41\xc9\x40\x51\x27\x83\x6a\x3f\x9c\xc7\x5a\x59\x54\xf6\x88\x2a\x67\x33\x78\xde\x4a\x9a\x51\x8f\x61\x26" +
	"\x52\xd8\xf4\xc7\x08\x1a\x6c\xea\x01\x25\x4a\x76\xa2\x93\x71\x84\xee\x69\xf6\xe5\x5e\x09\x36\x6c\x2c\xac\xb9\x90" +
	"\x58\xf4\x7d\xf6\x89\xe8\x42\x2f\x30\xd7\x05\x16\x20\x94\x45\xb3\xe6\x39\xb6\xdd\x4e\xaa\x40\xd4\xb5\xaa\xb8\x69" +
	"\x36\x5c\x26\xbe\xba\x37\x61\x5f\xfa\xcb\xcf\x15\x34\xc4\x91\xf4\x11\x4b\xb1\xb4\x6a\xf0\x85\xfa\x28\xf1\x07\x6d" +
	"\x2a\x6e\x2d\x9a\xf0\x94\xf4\x89\x9d\x8b\xbf\x57\x5d\xc5\xf4\x01\x48\xb4\x84\xdb\x8a\x2e\xb0\x34\x7e\xcd\x57\x50" +
	"\x5e\x15\xd9\x07\xc9\xcb\x26\x49\x33\x4f\xd2\xef\xdc\x7c\x4d\xde\xec\x1c\x03\xcf\x6b\x23\xb7\xe5\xf4\xec\xb0\xfe" +
	"\x7f\xff\x87\xdb\xee\x99\xe9\x88\xc4\x71\xa1\x8b\xff\x0e\x00\x00\xff\xff\xae\x92\x09\x5d\x48\x0d\x00\x00")

func bindataTemplatesCommandstmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatesCommandstmpl,
		"templates/commands.tmpl",
	)
}



func bindataTemplatesCommandstmpl() (*asset, error) {
	bytes, err := bindataTemplatesCommandstmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/commands.tmpl",
		size: 3400,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1538889713, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplatesMaintmpl = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8e\x41\x4b\xc3\x40\x10\x85\xcf\x3b\xbf\x62\xc8\x41\x12\xb0\x9b\x7a" +
	"\xed\xad\x68\x0e\x5e\xac\x88\x78\x5f\x37\x93\xed\x60\x76\x66\xd9\x6c\x4a\x25\xe4\xbf\x4b\x2a\xe2\xed\xbd\xf7\xf1" +
	"\x1e\x2f\x39\xff\xe5\x02\x61\x74\x2c\x00\x1c\x93\xe6\x82\x35\x98\x2a\x70\x39\xcf\x9f\xd6\x6b\x6c\x7b\x27\x4c\x63" +
	"\x28\xee\x7b\xd4\xdc\x6a\x22\x71\x89\x77\x7e\xe4\x5d\x20\xa1\xec\x8a\xe6\xd6\x8f\x5c\x41\x03\x30\xcc\xe2\x6f\x63" +
	"\x75\x83\x0b\x18\x3f\xb2\x7d\x16\x2e\xf5\xdd\xa6\x1e\x55\x06\x0e\x0b\x18\x73\x4c\xe9\xc5\x45\x3a\x20\x62\xb5\x2c" +
	"\x68\x37\x83\xeb\x5a\xdd\x83\x31\x9d\x5c\x5e\x33\x0d\x7c\x3d\xfc\xb3\x4e\x2e\x7f\xf8\x83\xf2\xc4\x2a\xb7\xea\x83" +
	"\xdd\xdb\xfd\x96\xae\x0d\x80\x69\x5b\x7c\x3f\x3d\x9d\x0e\x78\xec\x7b\xcc\x14\x78\x2a\x94\xd1\x6b\x8c\x4e\xfa\x09" +
	"\xcf\x94\xc9\xc2\xef\xa7\x37\xd5\x62\xbb\x2b\xf9\xb9\x50\xdd\xc0\x0a\x3f\x01\x00\x00\xff\xff\xd7\x90\x9c\xb4\x08" +
	"\x01\x00\x00")

func bindataTemplatesMaintmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatesMaintmpl,
		"templates/main.tmpl",
	)
}



func bindataTemplatesMaintmpl() (*asset, error) {
	bytes, err := bindataTemplatesMaintmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/main.tmpl",
		size: 264,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1538448749, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"templates/commands.tmpl": bindataTemplatesCommandstmpl,
	"templates/main.tmpl":     bindataTemplatesMaintmpl,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"templates": {Func: nil, Children: map[string]*bintree{
		"commands.tmpl": {Func: bindataTemplatesCommandstmpl, Children: map[string]*bintree{}},
		"main.tmpl": {Func: bindataTemplatesMaintmpl, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
