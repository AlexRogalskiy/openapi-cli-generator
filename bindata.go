// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/commands.tmpl
// templates/main.tmpl

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataTemplatesCommandstmpl = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x5b\x6f\xe3\x36\x13\x7d\x96\x7e\xc5\x7c\xc2\x7e\x0b\xa9\x75\x28" +
	"\x2c\xfa\xe6\xc2\x0f\xdb\x64\x6f\xc0\x26\xd9\xe6\xd2\x97\x20\x40\x68\x69\x2c\xb3\x4b\x91\x0a\x49\xa7\x75\x05\xfd" +
	"\xf7\x62\x48\xc9\x92\x13\x67\x37\x0b\x34\x40\x12\x9b\x33\x9c\x73\xe6\xcc\x45\xca\x73\x38\xd6\x25\x42\x85\x0a\x0d" +
	"\x77\x58\xc2\x72\x0b\xba\x41\xc5\x1b\x71\x54\x48\x71\xd4\x1b\xb4\x61\x70\x72\x0e\x67\xe7\x57\xf0\xee\xe4\xd3\x15" +
	"\x8b\xf3\x1c\x2e\x11\x61\xed\x5c\x63\xe7\x79\x5e\x09\xb7\xde\x2c\x59\xa1\xeb\xbc\xe4\x4a\xa0\xac\x1c\xdf\x4a\x6d" +
	"\xf2\x83\xb1\xe2\xb8\xe1\xc5\x57\x5e\x21\xd4\x5c\xa8\x38\x16\x75\xa3\x8d\x83\x34\x8e\x92\xe5\xd6\xa1\x4d\xe2\x28" +
	"\x41\x55\xe8\x52\xa8\x2a\xff\xd3\x6a\x45\x07\x0a\x5d\x4e\x70\xf4\xd9\x3a\x23\x54\x65\x93\x38\x8e\x92\x1f\x83\xce" +
	"\x0b\x29\x92\xfd\x5b\xb6\x59\xbd\xf9\x25\x2f\xf4\xd2\xf0\x83\x96\x07\xd1\xa0\x79\x64\x31\x36\xff\x07\x8d\x96\xba" +
	"\xca\xa5\xae\x92\x38\x8b\xe3\xb6\x85\x57\x8a\xd7\x08\xf3\x05\xb0\x33\xfa\xd0\x75\xfe\x90\x37\xc2\x9f\x7d\xd0\xc3" +
	"\x69\xbc\xda\xa8\x02\x06\x5b\xd7\x5d\xa2\x79\x40\x63\xd3\x0c\x6e\x6e\x6b\xde\xdc\x84\xf4\x6e\xc3\x3f\x68\xe3\xc8" +
	"\xa0\xdb\x18\x75\xc8\xda\xc6\x51\xd4\xb6\x60\xb8\xaa\x10\x5e\x59\x1f\xc8\xa3\xf5\x31\x09\x2e\x8a\xa2\x83\xf7\xa2" +
	"\x28\x29\xd1\x16\x46\x34\x4e\x68\x95\xcc\x21\x21\x4a\x21\x06\x3b\x19\x2d\xd0\x75\xc9\x2c\xf8\x6f\x8c\x7c\xe4\x77" +
	"\x7d\xf1\x79\x67\xef\x66\x81\x0d\xaa\xd2\xe3\x76\xf1\xd3\x5c\x2f\xb0\x12\xd6\xa1\x49\xed\x66\x59\xe8\xba\xe6\xaa" +
	"\x84\xa5\xd6\x32\xf3\x79\x6a\xed\x88\x7d\x21\x05\xbb\xd0\xda\xc5\x71\x24\x56\x30\xf1\x24\xda\xde\x69\x01\xaf\x7d" +
	"\xc5\xd8\x71\xb0\xf8\x7c\xae\x2d\xf6\xe4\x54\x50\x3a\xd0\xba\x5c\x6b\xe3\x82\x81\x5d\x09\x27\x47\xcb\x67\xad\xaa" +
	"\xb9\x47\x3b\xe5\xe6\x6b\xa9\xff\x52\xa9\xf7\x7a\x94\x7c\x46\xce\x94\x0f\xa0\xb4\xe8\x49\x0c\x0c\x99\x0f\x0e\x8b" +
	"\x47\xd1\xa7\x1e\x04\x02\x8b\x17\xa0\x90\x60\xf1\xa4\x9a\xba\xa1\x9e\x25\x2b\x15\xf4\x7c\xf8\xd6\xd7\xd4\xeb\x9a" +
	"\x7a\xd9\x26\x2d\xc0\xce\x7d\x3c\x2e\xbf\x70\xc3\xeb\xa1\xfc\xd1\x03\x37\x54\x83\xb1\x07\xfd\xb7\xab\x6d\x83\xbd" +
	"\xc7\x58\x35\xfa\x56\xd4\x25\x61\x1e\x90\x78\xd4\x98\x5d\xdb\x51\xc8\x3d\x8d\x83\x24\x3b\xd3\x73\x22\x7b\x5d\x06" +
	"\x75\xa3\xe8\xad\xa9\xec\x1c\x02\xe2\xa9\x50\xa2\xde\xd4\x67\x74\x96\xb6\x2d\x48\x54\xc0\x2e\xf0\x7e\x23\x0c\x96" +
	"\xbb\xcc\xfa\x8b\x17\x1b\x35\x07\x52\x23\x25\xda\x3f\xed\x71\x9e\x01\x37\x95\x85\x9b\xbe\xeb\x7b\xb5\xa2\x68\x1c" +
	"\x14\x3f\xdd\xec\x03\xba\x4b\xef\x91\x26\xc1\x44\xd5\xa0\x1f\x6a\xbf\xe0\xbb\x58\x40\x92\x0c\xf7\x87\x00\x8b\x43" +
	"\x53\x7c\xb3\x8b\xf9\x49\xb9\x21\xe0\x91\x50\x25\xfe\x9d\x64\xb7\x37\x7e\x88\x6e\x43\x9c\x20\x77\x14\x6d\x8c\x24" +
	"\x32\xc1\xf5\x67\x2f\xcf\x17\xee\xd6\xbe\x95\x82\xc7\xd8\x16\x62\x06\xaf\x1a\xd2\xc0\xb7\xc5\x13\x55\x7a\x82\x6d" +
	"\x0b\x62\x05\x78\xdf\xfb\xb2\x4f\x0a\x92\x86\xbb\x75\x32\xba\x78\xd4\x05\xf4\xcb\x94\x5d\x60\x23\x79\x81\xe9\xc6" +
	"\xc8\x19\x15\xf2\xae\xbd\xeb\x3a\x4a\x2f\x04\xe8\x1b\xa7\x6d\xef\xba\x3b\xaa\xad\x57\xf6\x86\xec\x94\xfc\xed\x0c" +
	"\xde\x64\x23\xf4\xb0\x01\xa2\x27\xad\x15\x45\x06\xef\x87\x19\x3f\x96\x02\x95\x63\x94\xee\x29\xba\xb5\x26\xaf\x34" +
	"\xa3\x9d\x42\x2c\xb2\xff\x30\xf5\xfb\x0d\x9a\xed\x34\x77\x62\xb1\x00\x83\xf7\xec\x6d\x59\xfe\x4e\xd6\xd0\x95\x67" +
	"\xc3\xe6\x78\x94\xdf\x34\x39\x5a\x02\x4f\x10\xd6\xc8\x4b\x34\xcf\x42\x7c\xf4\xe6\x97\x63\x7c\x43\xc0\xef\x0d\xbb" +
	"\xef\xda\xfd\x69\xff\xdf\x62\x37\xf0\x67\x42\xfa\xf9\x1f\x58\xee\xd4\x3a\xac\xd3\x0b\x84\x5a\xd5\x8e\x5d\x36\x46" +
	"\x28\xb7\x4a\x93\xff\x3f\x24\xb3\x7d\xf0\x2c\x9b\x40\x4d\xb4\x7b\x46\xb5\x97\xc8\xf6\x43\x88\x13\x25\xa3\xe7\x15" +
	"\x15\x2b\x60\xc7\x5c\x7d\xe4\x0f\xf8\x9b\x2e\xb7\xe3\x95\xa5\x2e\xb7\x33\x40\x63\x86\xa6\xfd\x80\x8e\x3c\x02\xa7" +
	"\x53\x2c\x05\xef\xf7\xe8\xa4\x9e\x07\x16\x56\xd7\xcd\x77\x05\x26\x01\x8c\xa1\xaa\x28\x21\xc7\x52\x48\x5d\xb1\xf7" +
	"\xdc\x71\x99\x66\xec\x9d\x31\x29\x1a\x93\xb1\x53\x5b\xa5\xc9\xb5\xe2\x4b\x89\xe0\x34\x54\xe8\x80\x28\x0d\x0b\x6a" +
	"\xb7\x42\x28\x28\x19\x28\xea\x64\x51\x1d\x96\xf3\x58\x2b\x87\xca\x1d\x11\xf3\x64\x06\x4f\x53\xc9\x18\xe5\xd8\xef" +
	"\x44\x0a\x9b\x7d\x5b\x41\x83\xb6\xd9\xa9\x44\x60\x27\x3a\x1d\x57\xe8\x81\x64\x9f\xcf\x95\x64\x43\xeb\x60\xc5\x85" +
	"\xc4\x72\xc8\x73\x00\xa2\x27\x59\x89\x85\x2e\xb1\x04\xa1\x1c\x9a\x15\x2f\xb0\xed\xf6\xa0\xfa\x42\x5d\xab\x9a\x1b" +
	"\xbb\xe6\x32\x0d\xec\x5e\xf7\xf7\xb2\x5f\x7f\x8c\xd0\x2e\x8e\xa4\xd7\x31\x8a\xa5\x95\xc5\x67\xf8\x11\xf0\x7b\x6d" +
	"\x6a\xee\x1c\x9a\xfe\x53\x3a\x00\x7b\x97\x2e\xbc\x2b\xd1\x1f\x7a\x95\xa1\xb2\xf4\x4f\x2b\x7a\x80\x85\xa5\xf7\xbd" +
	"\x11\x2f\xea\x92\xbd\x97\xbc\xb2\x69\xc6\x42\x91\xfe\xe0\xe6\x4b\xfa\x7a\x6f\x0c\x42\x5d\xad\xdc\x54\xd3\xd9\x49" +
	"\x86\xdf\xc3\xaf\x20\xfb\x33\xd3\x51\x11\xc7\x83\x2e\xfe\x37\x00\x00\xff\xff\xd6\xb5\xa9\xf3\x31\x0c\x00\x00")

func bindataTemplatesCommandstmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatesCommandstmpl,
		"templates/commands.tmpl",
	)
}



func bindataTemplatesCommandstmpl() (*asset, error) {
	bytes, err := bindataTemplatesCommandstmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/commands.tmpl",
		size: 3121,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1538461824, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplatesMaintmpl = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8e\x41\x4b\xc3\x40\x10\x85\xcf\x3b\xbf\x62\xc8\x41\x12\xb0\x9b\x7a" +
	"\xed\xad\x68\x0e\x5e\xac\x88\x78\x5f\x37\x93\xed\x60\x76\x66\xd9\x6c\x4a\x25\xe4\xbf\x4b\x2a\xe2\xed\xbd\xf7\xf1" +
	"\x1e\x2f\x39\xff\xe5\x02\x61\x74\x2c\x00\x1c\x93\xe6\x82\x35\x98\x2a\x70\x39\xcf\x9f\xd6\x6b\x6c\x7b\x27\x4c\x63" +
	"\x28\xee\x7b\xd4\xdc\x6a\x22\x71\x89\x77\x7e\xe4\x5d\x20\xa1\xec\x8a\xe6\xd6\x8f\x5c\x41\x03\x30\xcc\xe2\x6f\x63" +
	"\x75\x83\x0b\x18\x3f\xb2\x7d\x16\x2e\xf5\xdd\xa6\x1e\x55\x06\x0e\x0b\x18\x73\x4c\xe9\xc5\x45\x3a\x20\x62\xb5\x2c" +
	"\x68\x37\x83\xeb\x5a\xdd\x83\x31\x9d\x5c\x5e\x33\x0d\x7c\x3d\xfc\xb3\x4e\x2e\x7f\xf8\x83\xf2\xc4\x2a\xb7\xea\x83" +
	"\xdd\xdb\xfd\x96\xae\x0d\x80\x69\x5b\x7c\x3f\x3d\x9d\x0e\x78\xec\x7b\xcc\x14\x78\x2a\x94\xd1\x6b\x8c\x4e\xfa\x09" +
	"\xcf\x94\xc9\xc2\xef\xa7\x37\xd5\x62\xbb\x2b\xf9\xb9\x50\xdd\xc0\x0a\x3f\x01\x00\x00\xff\xff\xd7\x90\x9c\xb4\x08" +
	"\x01\x00\x00")

func bindataTemplatesMaintmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatesMaintmpl,
		"templates/main.tmpl",
	)
}



func bindataTemplatesMaintmpl() (*asset, error) {
	bytes, err := bindataTemplatesMaintmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/main.tmpl",
		size: 264,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1538448749, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"templates/commands.tmpl": bindataTemplatesCommandstmpl,
	"templates/main.tmpl":     bindataTemplatesMaintmpl,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"templates": {Func: nil, Children: map[string]*bintree{
		"commands.tmpl": {Func: bindataTemplatesCommandstmpl, Children: map[string]*bintree{}},
		"main.tmpl": {Func: bindataTemplatesMaintmpl, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
