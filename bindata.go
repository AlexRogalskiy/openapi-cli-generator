// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/commands.tmpl
// templates/main.tmpl

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataTemplatesCommandstmpl = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x59\xdd\x73\xdb\xb8\x11\x7f\x26\xff\x0a\x1c\x27\xb9\x21\x13\x99\xca" +
	"\x5d\x6f\xfa\xa0\x9e\x3a\x93\x38\x9f\x33\x67\x27\xb5\x9d\xbb\x07\xd7\xd3\xc0\xe4\x4a\xc2\x18\x04\x68\x10\xf2\x47" +
	"\x75\xfc\xdf\x3b\x0b\x80\x24\x28\x52\xb2\x9d\xf6\xa5\x2f\x36\xcd\x05\xb1\x1f\xf8\xed\x6f\x77\xe1\xe9\x94\x1c\xca" +
	"\x1c\xc8\x12\x04\x28\xaa\x21\x27\x97\xf7\x44\x96\x20\x68\xc9\x0e\x32\xce\x0e\x9c\x40\xaa\x94\xbc\xfd\x4c\x8e\x3f" +
	"\x9f\x91\x77\x6f\x3f\x9d\xa5\xe1\x74\x4a\x4e\x01\xc8\x4a\xeb\xb2\x9a\x4d\xa7\x4b\xa6\x57\xeb\xcb\x34\x93\xc5\x34" +
	"\xa7\x82\x01\x5f\x6a\x7a\xcf\xa5\x9a\x8e\xee\x15\x86\x25\xcd\xae\xe8\x12\x48\x41\x99\x08\x43\x56\x94\x52\x69\x12" +
	"\x87\xc1\x66\x43\xd8\x82\xa4\x9f\xcc\x8b\x2a\x7d\x5f\x68\x52\xd7\xd1\xa2\xd0\xd1\x66\x43\x40\xe4\xa4\xae\x07\x8b" +
	"\x4e\xb5\x62\x62\x59\xe1\xc2\xca\x3e\xee\x59\x7c\xc6\x0a\xc0\x95\x9a\x15\xe0\x2d\x0b\x83\xe8\x69\x2e\x4c\x33\xce" +
	"\xa2\xfe\x57\xe5\xd5\x72\x0a\x4a\x49\x55\x6d\x09\x54\x35\xfd\x37\x28\xc9\xe5\x72\xca\xe5\x72\x4b\x58\x95\x8b\x9f" +
	"\xfe\x32\xcd\xe4\xa5\xa2\xa3\x92\x1b\x56\x82\x32\x12\x59\x5e\x2d\x53\x26\xa6\xab\x9f\x85\x14\xd3\x25\x08\xcd\xa1" +
	"\xa0\x22\xbd\xf9\x39\x0a\x93\x30\xdc\x6c\x48\x0e\x0b\x26\x80\x44\x25\x55\xb4\xa8\x22\xe7\xff\x01\x51\x54\x2c\x81" +
	"\xa4\x9f\x4b\xcd\xa4\xa0\xfc\x8b\x11\x1b\xa9\x11\xb3\x05\x81\x6b\x92\x9e\xdd\x97\x40\xa2\x4b\x29\x39\x50\x61\x3f" +
	"\x0e\x82\xac\xc8\xd3\xf7\x9c\x2e\xab\x38\x49\xdf\x48\xc9\x63\x0c\x5a\x7a\xf8\xdb\xa7\x63\x6a\x03\x39\x21\x0b\xca" +
	"\x2b\x98\x10\x23\x78\x0b\x55\xa6\x98\xd1\x83\xc2\xc4\x69\x00\x5e\x41\x5f\x0d\x13\xfa\xaf\xbf\x8c\x29\xf9\x84\x82" +
	"\x11\x2d\xaf\x9e\xaa\x61\xc1\x25\xdd\xa1\xe3\xbd\x15\x8d\x69\x49\x1f\xa3\x67\xb8\xa3\xc5\xe0\xc8\x86\x51\xf4\xc0" +
	"\x7e\x2d\x4c\x0f\x3a\x2c\x7a\x67\xf6\x07\x65\x1a\x94\x3b\xac\xe1\x61\xdc\x52\xa6\x0f\x70\x7b\xbb\x6e\xf7\xc1\x38" +
	"\xf9\xe9\x0a\x13\xcd\xea\xef\xa9\xcc\x38\x4b\x4f\x41\x1f\xae\x2b\x2d\x0b\xab\x23\x2b\xf2\x24\x0c\x03\xb6\x20\xbe" +
	"\xde\x8f\xb4\x72\x8f\x64\x13\x06\x81\x85\x5a\xfa\x86\x89\xfc\x4b\xfb\x59\xb3\x38\x09\x83\x3a\xf4\x92\x6c\xb3\x21" +
	"\xcf\x04\x9a\x37\x9b\x93\xd4\xd9\x69\x5e\xd2\x92\x99\x77\x1f\xe4\xd6\xdb\x2f\xeb\x4b\xce\x32\x23\xb3\x8f\xdd\x8a" +
	"\xf0\x86\x2a\xd2\x7c\x5c\xd7\xa7\xeb\xcb\x4c\x16\x05\x15\x39\x41\x08\x87\xe1\x62\x2d\x32\x5f\x0e\xea\x06\x14\x9a" +
	"\x7d\x7e\x51\xd0\xf2\xdc\x52\xc5\x85\xfd\x85\xae\x28\xd0\x6b\x25\xc6\xa4\x1b\x73\x56\xee\x44\x9e\x55\x66\x23\x63" +
	"\x92\xdb\xd3\xe1\x61\xf4\xbb\x20\x88\xf2\xee\xe4\xa3\x99\x39\x0d\xb7\xc7\x36\x26\x26\x76\xfd\x5a\xf1\xad\x75\x5f" +
	"\x4f\x7e\x6b\xe5\xf5\xc4\x5a\xd3\x00\xa7\x0e\x6d\x60\x9d\x75\xb2\x44\x7e\xc2\x0d\xd1\xc0\xcf\xcd\x5f\xd6\xc6\xe9" +
	"\x94\xf4\xe3\x5a\xd7\x88\x8d\x36\xa6\x28\x6d\x21\x12\x06\x7e\x04\xc7\x3f\x88\x5b\xc5\xe9\x09\x5c\xaf\x99\x82\xbc" +
	"\x25\x97\xfe\xce\x36\x22\x13\xd2\x5a\x6e\x81\x43\x5e\x18\x7e\x4b\x7f\xc7\x9f\x8e\xaa\x0f\xa9\xf8\x48\x6f\xe0\x8d" +
	"\xcc\xef\x49\x5d\x4f\xc8\x25\x3e\xb8\x88\x36\x5f\x27\x24\x7e\xd1\x31\xe0\x09\x54\xa5\x14\x88\x75\x54\x7a\x62\x0e" +
	"\xd2\x90\x00\x7e\x6e\x28\xd9\x82\x75\x45\x45\xce\x41\x7d\xa1\x7a\x85\xe1\x31\x89\xf1\xd1\xbe\x6b\xb2\x26\x0c\x10" +
	"\xf0\xa3\xb0\x32\xc7\xe9\x6f\x61\x77\xb0\x88\xae\x6b\x12\x91\x97\xc4\x13\x87\x41\x80\x89\x15\x74\x78\xb1\xae\x7e" +
	"\x00\xdd\xb0\x85\x15\x19\x2e\x60\x0b\xe2\x16\xce\xe7\x24\x8a\xac\xb2\xe6\xcd\x18\x8c\xcf\xdb\xdd\x3e\x09\xdd\x6c" +
	"\x75\xc0\x44\x0e\x77\x51\x72\x71\x6e\x50\x74\xd1\xd8\xb0\x56\x1c\x0d\xb0\x8b\x5e\x1a\xbf\x8d\x07\xe8\xb0\x23\x22" +
	"\x87\x1f\x36\x21\xcf\xcc\xd1\x18\xfc\x0c\x0e\x15\xad\xea\x4a\x86\x5d\x99\x7e\x12\x58\x72\xf4\xaa\xa1\x5a\xa3\x6e" +
	"\xee\x8e\xac\x4a\x4f\xa0\xe4\x34\x83\x78\xad\xb8\x21\xa3\x6f\x9b\x6f\x06\x1d\xee\x6b\x17\xf9\xcd\xe6\x5b\xfd\xcd" +
	"\xd0\x56\x27\x6a\xe1\x33\x21\x3f\x25\x8d\xea\x06\xf8\x7d\xfe\x0a\x14\x5c\xa3\xc9\xc8\x63\x87\x9c\x81\xd0\x29\x7a" +
	"\x79\x04\x7a\x25\x71\x49\x9c\x60\x16\xa1\x0d\x49\xd8\x4b\xe7\x47\x39\x3c\xf4\xf7\x7a\x0d\xea\xbe\x75\x18\x95\xcf" +
	"\x89\x82\xeb\xf4\x75\x9e\xff\x03\x45\xb6\x14\x74\x5c\x3c\xe2\x94\xf3\xc8\x2f\x5d\x9e\x82\x15\xd0\x1c\xd4\xb8\x86" +
	"\x8f\x46\xf6\x14\x15\x5d\xcc\xbc\x90\x3d\xd0\x1a\x04\xfd\x0c\x9e\xcd\x89\x23\xfb\x0f\xa0\x51\x64\x32\xec\x4f\xa2" +
	"\x99\xe6\x86\x0b\xb6\x8b\x9f\x51\x6e\x93\xc9\xdb\xe6\x07\x83\x66\xf3\xf1\x31\xe3\x86\x74\x8c\x83\x5e\x23\x32\x8c" +
	"\xef\x23\x02\xbc\x28\x74\x7a\x5a\x2a\x26\xf4\x22\x8e\x9e\xdf\xd8\x78\x78\x91\x48\x5a\x2d\x7e\xab\x30\x12\xe9\xc7" +
	"\x84\xfa\x09\xca\x9a\xc8\x07\x43\xc8\x8e\xf2\x9d\x0b\x9a\x21\xbd\x1f\x3a\x2a\x18\xb7\xea\x50\x0a\x0d\x42\x1f\x60" +
	"\x34\x9b\x46\xe3\x08\x72\x46\x1d\xfb\x45\xd8\x27\xe4\xf7\x8e\x6f\x70\xcf\xa4\x33\xc5\xb3\x04\xb3\xc6\x12\xe1\x1b" +
	"\x58\x48\x05\xb1\xc7\x63\x13\x77\xec\x13\x54\x9e\xd8\x54\xab\x4a\xc3\xab\x88\x09\xb4\xe8\xad\x8c\x1d\x87\xe1\xcb" +
	"\x1f\xe6\x44\x30\x6e\xcd\x76\x45\x55\x30\x3e\xb1\x3f\x6c\x83\x9c\xfe\xa1\x68\x19\x83\x52\x13\x12\x61\xca\x41\xa5" +
	"\xc9\x82\x32\x0e\xb9\x41\x8d\xb1\x09\xcb\x7b\x0e\x99\xcc\x21\x1f\xd2\x7a\x68\xd5\xa1\x25\xe9\xa9\xa6\x7a\x5d\x99" +
	"\x31\xe6\x57\xf2\xcb\xab\x57\x56\xb3\x33\xc6\x51\xc2\x57\x51\x50\x55\xad\x28\x6f\x4a\x45\x6c\x9d\xf8\xd1\x69\x48" +
	"\xfe\x36\x30\xfd\x31\xb6\xb7\xdb\x72\x6c\x22\x94\xdb\xdb\x77\xc5\xc4\xda\x98\x4b\x17\x1a\x5a\x7b\x6c\xb0\x5f\xe3" +
	"\xab\x5d\xb1\x46\xf3\x1a\xeb\xac\xb7\x76\x07\xdf\xc6\x26\x3e\x73\x2b\xb3\x80\x12\xd0\x0b\x16\xb6\xda\xa0\x16\x34" +
	"\x83\x4d\x8d\x20\x4f\xe3\x41\x34\x13\x9f\x22\x1c\x9b\x1a\xdf\x7b\x56\x98\x28\x0c\x3b\x3a\xc7\xa3\xb7\xa6\xc1\x34" +
	"\x24\xea\xf7\xac\x4f\xea\x21\xda\x76\xe5\x7f\xd1\x4d\x24\xf6\xbc\x4c\xa0\xa8\xd6\x50\x94\x1a\xad\x7b\x15\x06\xc1" +
	"\x42\x2a\xd2\xbc\xfa\xd5\x58\x67\xad\x4f\x5f\xdb\x97\x55\x4b\x4b\x6e\xd5\xcb\x97\xa1\x45\x73\x2f\x1c\x0e\x5f\x63" +
	"\xde\x75\x9e\xfc\x37\x7e\x0e\x1c\x4c\x3c\x64\x8f\x61\x75\x88\xd0\x43\xb9\xe6\x39\x11\x52\x93\x8c\x72\x4e\xdc\x29" +
	"\xb5\x5d\x62\x83\x51\xfc\x89\x09\x47\x33\xbd\xa6\x9c\x78\x90\x69\x24\x05\xd5\xd9\xca\xb6\xd6\x81\x5f\x3f\xcd\x7b" +
	"\x77\xf0\x47\xf6\xb9\xa9\x1f\x81\xdd\xcd\x06\xca\xe2\xfe\x03\x68\xb3\xe8\x77\xca\xd7\x36\x07\x53\xc3\x61\x77\xda" +
	"\xb1\xd7\x29\x70\xc8\xb4\x65\x59\x57\x6e\x5e\x73\x7e\x0a\x5a\x63\x2f\x11\x27\xbd\x9c\x18\x8f\xc5\x63\x82\xb1\x04" +
	"\x4d\x1a\xcb\x6f\xd0\x16\x1b\x08\x17\x89\xc0\x88\x7c\xbb\x8d\xd1\xb6\x0a\x9c\x21\x59\x19\xfb\xce\x2f\x2e\xef\x35" +
	"\x98\x74\x7a\x77\x57\x42\xa6\x21\x27\x7f\x12\x5b\x16\x48\xf4\xfc\x1a\xb3\x2d\x99\xb8\x98\x7e\x8f\xbd\x7f\x38\x0b" +
	"\x6d\xec\x91\x55\xd6\xaa\xb5\xb4\xad\x63\x56\xea\xf6\x6a\x7b\x15\x43\x8b\x38\x06\xbb\xaf\xda\xf2\xb6\xa5\xee\x1d" +
	"\xfe\x5a\xc4\x91\x4d\x5a\x92\x51\x81\xf1\x51\x40\xb3\x15\xc9\xa1\x42\x70\x92\xca\x6c\x75\x09\x19\x5d\x57\x40\x9e" +
	"\x57\x84\x55\xe4\x79\x15\x8d\x1c\xd9\xfe\x58\xb4\x26\x7a\x53\x74\x10\x04\x97\x0a\xe8\x55\x27\x6b\x2b\x66\x50\xf7" +
	"\xdb\x17\xfc\x4b\xb3\x02\xd2\x53\x0e\x50\xc6\x76\xaa\xe6\x14\xab\xe6\x0b\xfb\x1e\x32\x29\xf2\xb6\x82\x20\x65\xba" +
	"\x2c\xff\xfb\x7c\x6f\x9a\xf7\x43\x72\x0c\xb7\x71\x74\x44\xef\x58\xb1\x2e\x9a\x1d\x2a\x02\x77\x19\x40\xee\x57\xa8" +
	"\xae\x40\x6c\xb1\xe2\xd6\xe8\x79\x02\x4b\x56\x21\xd3\x57\xfd\x19\xd5\x0c\x25\x4a\x4a\xdd\x54\x85\x13\x29\xb5\x9d" +
	"\xb8\xab\xfe\xd8\x61\x16\xcd\xc9\x8f\xe6\x9a\x28\x3d\xb4\x12\x63\xf9\xd7\x0a\x66\xbd\x31\xc4\x4e\x89\x66\x88\xb3" +
	"\x82\xf4\xcc\x35\x68\x56\xf2\x9b\x14\xcb\x99\xc3\xb4\xba\xca\xe5\xad\x88\x47\xef\x27\x26\x61\xdb\x27\x0c\x47\xa1" +
	"\x39\xd1\x6a\x0d\x61\x03\xc2\x8d\x6b\x21\xd0\x7e\x37\x3f\xce\xb7\x74\xfb\x2b\xd0\x84\x36\xaf\xf6\xd9\x10\x06\xf6" +
	"\x36\xc4\xb4\x49\xbd\x9b\x10\x3c\x48\x8c\xda\xce\x88\xe0\x82\x7e\x28\xf0\x7b\x62\x98\x9f\x64\xa0\x34\x65\x82\xc0" +
	"\x0d\x08\x4d\xa4\x6a\x01\x8e\xbd\x0f\xb1\xc7\xca\xc4\xd2\x0f\x58\xf4\x86\xcb\xec\x0a\x51\x00\xd9\xda\x18\x88\x71" +
	"\x58\x57\x50\x91\x52\xda\xf2\xaf\x25\x29\x41\x31\x99\x33\xa4\xda\x7b\x92\xad\x20\xbb\xfa\x0e\x8d\xb5\x3b\x70\x6c" +
	"\xf4\x9c\x63\x31\xba\xb3\x35\xb8\xec\x28\xb8\x81\x2d\xb9\xee\x7a\xa6\xb9\xa0\xe9\xc6\x4f\x04\xb7\x4d\xc4\xac\xc8" +
	"\x77\x84\xd0\x83\x55\xfa\xb5\xea\xb0\xd3\x76\xe9\xe9\x6b\xce\x28\xfa\xde\xe6\xb0\x7b\x31\x23\xe7\xbd\xcb\x8f\xa0" +
	"\x37\x65\x0c\xbe\x0a\x02\xa3\xc3\x53\xb0\xdd\x35\x37\x37\x1e\x23\x02\x1f\xe3\xed\xbd\x96\x5b\xbb\x0b\xe5\x06\x7a" +
	"\x0d\xbc\xd1\x6c\xb5\xac\x66\xc4\x46\xe0\x88\x09\xcc\xf8\x63\x7c\x87\xe4\xc2\x41\xec\x2d\xd5\xcd\x1e\x27\x6b\x31" +
	"\x23\x18\xf4\x18\x23\xfa\xa2\x17\xce\x09\xa1\x6a\x59\xb5\x41\x69\x0e\xc5\x6f\x4f\x1f\xd9\x1c\x3d\xbb\xeb\x0d\xaa" +
	"\x7b\xec\x42\x8d\xe7\xb8\xeb\x1d\xa9\xeb\x8b\x61\x0f\x31\xd2\xea\x06\x41\xc0\xe5\x32\x7d\x4f\x35\xe5\x71\x82\x35" +
	"\x01\x2b\x50\x92\x1e\x55\xcb\x38\x32\x15\xc2\x74\x0e\x88\xd0\xa4\x39\x95\xd0\x3f\x1c\xfb\x17\xae\xf1\x51\xeb\x6e" +
	"\x10\x2d\x89\x23\x8d\x72\x53\x92\x9a\xeb\xe9\xce\x89\x66\x44\x8a\x93\xfe\xe5\x96\xcf\xfd\x8f\xbc\xe3\xea\xc3\x7f" +
	"\x1c\xfd\x4d\x4f\x03\x77\xb4\x28\x39\x54\xae\x9f\x0c\xfb\x9d\x0d\xdc\x99\xfd\xdf\x35\x8b\x1c\xee\xda\x8f\x5e\xce" +
	"\x49\x44\xcc\xad\x4f\xcb\x6c\xce\x71\x6c\xe5\xe3\x84\xbc\x24\x91\x39\xdd\xd6\x5e\x97\x4c\xe6\x25\xe0\xe9\xfc\x53" +
	"\x44\xc3\x12\xb7\x27\x2f\x77\xa4\xe5\xae\xac\xdc\x99\x94\x7b\x73\x72\x90\x92\xdb\x89\x57\x4f\x46\xc6\xdb\x7d\xe9" +
	"\xf8\xc8\x6c\x6c\xdc\xf8\xc8\xf2\x1c\x44\xab\xce\xfe\x39\x33\xbd\x45\x2b\x1a\x35\xc1\x1d\xd5\xac\x3d\x58\xbb\xea" +
	"\xc1\x24\xdf\x95\xda\xdf\x93\xd9\x8d\x13\xc3\xa9\x3e\x08\x70\x00\x9f\xf8\x63\xe9\x07\xd0\xb8\x20\x1e\x0e\xee\x76" +
	"\xfb\xf3\x71\x0b\xeb\x7a\x76\xe1\xf2\x70\xb4\xa1\xdc\x93\xcc\x5f\x05\xbd\xe4\x80\xb5\x0a\x5b\x60\x34\xa8\xc9\xe8" +
	"\x7a\xc0\xb2\x7e\x47\x99\x1e\x03\xe4\x55\x33\x3d\x93\xba\xc6\xde\xbd\xeb\xe4\xfe\xd5\x42\xf8\x71\xf3\xd1\xc3\x04" +
	"\xf7\x54\x5a\xdb\x73\x79\xdc\xdd\x1a\x7f\x5f\xcc\x2c\x01\x66\x6e\xca\xdf\x9a\x9d\xda\x99\x61\xeb\xc6\xe1\xbd\x54" +
	"\x05\xf6\x8e\xca\x3d\xc5\x7b\x6e\x1a\xf6\x29\x77\xfb\xa0\x66\xff\x5a\xa1\x53\x3b\xd6\x1e\xd9\x36\xff\xfa\x4b\xcb" +
	"\x7e\x63\xa3\x54\xd8\xa6\xf7\xe8\x5d\xa8\x47\x5b\xa3\xb7\xa2\x3d\x1d\xe7\xd1\xe0\x42\x37\xba\x20\xf3\x16\xc4\xcf" +
	"\xb0\x81\xbc\xe8\x14\xf6\x10\xb6\x67\xf2\x1c\xc5\xe3\xf8\x3f\xc7\xdc\x11\x74\x77\x94\x0f\xfe\x87\xac\xab\xc6\xc1" +
	"\xed\xee\x42\xd1\xd7\x69\x50\x5a\x99\x89\x47\xda\xe6\x0b\x99\xc4\xef\x68\x9e\x3e\xf4\x76\xfb\x99\xc4\x6f\x83\xba" +
	"\x35\xeb\xee\x86\xee\x5e\x00\x3d\x3c\xf4\xfa\x68\x42\x07\xd4\xb2\x49\x33\x74\x70\x78\xd7\xe9\x0f\xb4\x63\x27\xd4" +
	"\xff\x87\x42\xbe\x1d\xb0\x01\x8a\xfe\xff\x43\xe6\xe0\x93\x9e\x82\x36\x5c\xfe\x8c\xe5\x8e\xc4\x1f\x0c\xd5\xfe\x46" +
	"\xd0\x81\x76\x17\x5d\x8e\x01\xd1\x3b\x3e\x8f\x24\x6f\xf7\x36\x7f\x7b\x62\xe1\xee\x05\xcc\x68\xdc\x39\x5f\xf7\xbb" +
	"\xc0\xad\x3a\x6c\xab\xb3\x79\xde\x1e\x64\xda\x96\x70\xbc\x23\x74\x57\x90\x71\xe2\xf7\x7e\x75\xf8\x9f\x00\x00\x00" +
	"\xff\xff\x37\x57\x07\x8f\xa7\x22\x00\x00")

func bindataTemplatesCommandstmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatesCommandstmpl,
		"templates/commands.tmpl",
	)
}



func bindataTemplatesCommandstmpl() (*asset, error) {
	bytes, err := bindataTemplatesCommandstmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/commands.tmpl",
		size: 8871,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552254151, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplatesMaintmpl = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8e\x41\x4b\xc3\x40\x10\x85\xcf\x3b\xbf\x62\xc8\x41\x12\xb0\x9b\x7a" +
	"\xed\xad\x68\x0e\x5e\xac\x88\x78\x5f\x37\x93\xed\x60\x76\x66\xd9\x6c\x4a\x25\xe4\xbf\x4b\x2a\xe2\xed\xbd\xf7\xf1" +
	"\x1e\x2f\x39\xff\xe5\x02\x61\x74\x2c\x00\x1c\x93\xe6\x82\x35\x98\x2a\x70\x39\xcf\x9f\xd6\x6b\x6c\x7b\x27\x4c\x63" +
	"\x28\xee\x7b\xd4\xdc\x6a\x22\x71\x89\x77\x7e\xe4\x5d\x20\xa1\xec\x8a\xe6\xd6\x8f\x5c\x41\x03\x30\xcc\xe2\x6f\x63" +
	"\x75\x83\x0b\x18\x3f\xb2\x7d\x16\x2e\xf5\xdd\xa6\x1e\x55\x06\x0e\x0b\x18\x73\x4c\xe9\xc5\x45\x3a\x20\x62\xb5\x2c" +
	"\x68\x37\x83\xeb\x5a\xdd\x83\x31\x9d\x5c\x5e\x33\x0d\x7c\x3d\xfc\xb3\x4e\x2e\x7f\xf8\x83\xf2\xc4\x2a\xb7\xea\x83" +
	"\xdd\xdb\xfd\x96\xae\x0d\x80\x69\x5b\x7c\x3f\x3d\x9d\x0e\x78\xec\x7b\xcc\x14\x78\x2a\x94\xd1\x6b\x8c\x4e\xfa\x09" +
	"\xcf\x94\xc9\xc2\xef\xa7\x37\xd5\x62\xbb\x2b\xf9\xb9\x50\xdd\xc0\x0a\x3f\x01\x00\x00\xff\xff\xd7\x90\x9c\xb4\x08" +
	"\x01\x00\x00")

func bindataTemplatesMaintmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatesMaintmpl,
		"templates/main.tmpl",
	)
}



func bindataTemplatesMaintmpl() (*asset, error) {
	bytes, err := bindataTemplatesMaintmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/main.tmpl",
		size: 264,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1538448749, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"templates/commands.tmpl": bindataTemplatesCommandstmpl,
	"templates/main.tmpl":     bindataTemplatesMaintmpl,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"templates": {Func: nil, Children: map[string]*bintree{
		"commands.tmpl": {Func: bindataTemplatesCommandstmpl, Children: map[string]*bintree{}},
		"main.tmpl": {Func: bindataTemplatesMaintmpl, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
