// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/commands.tmpl
// templates/main.tmpl

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataTemplatesCommandstmpl = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x5b\x4f\xe3\xc8\x12\x7e\xb6\x7f\x45\x9d\x16\x67\x64\x1f\x42\x47" +
	"\xa3\xf3\x96\x55\x1e\x66\x61\x6e\xd2\x00\xb3\x5c\xf6\x85\x45\xa2\x63\x57\x9c\xd6\xb4\xbb\x4d\xbb\xc3\x0e\x6b\xf9" +
	"\xbf\xaf\xaa\xdb\xb7\x40\x98\x65\xa4\x45\x02\x12\x57\xb9\xea\xbb\x54\x97\x3d\x9f\xc3\xb1\xc9\x11\x0a\xd4\x68\x85" +
	"\xc3\x1c\x56\x8f\x60\x2a\xd4\xa2\x92\x47\x99\x92\x47\x5d\xc0\x58\x0e\x27\xe7\x70\x76\x7e\x05\xef\x4f\x3e\x5f\xf1" +
	"\x78\x3e\x87\x4b\x44\xd8\x38\x57\xd5\x8b\xf9\xbc\x90\x6e\xb3\x5d\xf1\xcc\x94\xf3\x5c\x68\x89\xaa\x70\xe2\x51\x19" +
	"\x3b\xdf\x5b\x2b\x8e\x2b\x91\x7d\x13\x05\x42\x29\xa4\x8e\x63\x59\x56\xc6\x3a\x48\xe2\x88\xad\x4b\xc7\xe2\x88\xd5" +
	"\xce\x4a\x5d\xd4\x2c\x8e\x23\xf6\x73\xb5\xe7\x99\x92\x6c\xf7\x2e\x5b\xcf\xff\x42\x6b\x94\x29\xe6\xca\x14\x4f\x82" +
	"\x75\xb5\x7e\xfb\xff\x79\x66\x56\x56\xec\x8d\x3c\xc8\x0a\x2d\x8b\xd3\x38\x6e\x1a\x38\xd0\xa2\x44\x58\x2c\x81\x9f" +
	"\xd1\x87\xb6\xf5\x17\x45\x25\xfd\xb5\x8f\xa6\xbf\x1a\xaf\xb7\x3a\x83\x3e\xd6\xb6\x97\x68\x1f\xd0\xd6\x49\x0a\x37" +
	"\xb7\xa5\xa8\x6e\x02\xbd\xdb\xf0\x0f\x9a\x38\xb2\xe8\xb6\x56\xef\x8b\x36\x71\x14\x35\x0d\x58\xa1\x0b\x84\x83\xda" +
	"\x17\xf2\xdd\xba\x9a\xd4\x2e\x8a\xa2\xbd\xf7\x45\x11\xcb\xb1\xce\xac\xac\x9c\x34\x9a\x2d\x80\x11\xa4\x50\x83\x9f" +
	"\x8c\x11\x68\x5b\x36\x0b\xf9\x5b\xab\x9e\xe4\x5d\x5f\x7c\x19\xe2\xed\x2c\xa0\x41\x9d\xfb\xbe\x6d\xfc\x9c\xeb\x05" +
	"\x16\xb2\x76\x68\x93\x7a\xbb\xca\x4c\x59\x0a\x9d\xc3\xca\x18\x95\x7a\x9e\xc6\x38\x42\x9f\x29\xc9\x2f\x8c\x71\x71" +
	"\x1c\xc9\x35\x4c\x32\x09\xb6\x4f\x5a\xc2\x1b\x6f\x0a\x3f\x0e\x11\xcf\xe7\xba\xc6\x0e\x9c\x0e\x4a\x07\x58\x97\x1b" +
	"\x63\x5d\x08\xf0\x2b\xe9\xd4\x18\xf9\x62\x74\xb1\xf0\xdd\x4e\x85\xfd\x96\x9b\x3f\x75\xe2\xb3\x9e\x90\x4f\x29\x99" +
	"\xf8\x00\xaa\x1a\x3d\x88\x1e\x21\xf7\xc5\x61\xf9\xa4\xfa\x34\x83\x9a\xc0\xf2\x15\x5d\x48\xb0\x78\xe2\xa6\xa9\x68" +
	"\x66\x29\x4a\x86\x9e\xf7\xdf\x3a\x4f\xbd\xae\x89\x97\x6d\x32\x02\xfc\xdc\xd7\x13\xea\xab\xb0\xa2\xec\xed\x8f\x1e" +
	"\x84\x25\x0f\xc6\x19\xf4\xdf\xae\x1e\x2b\xec\x32\x46\xd7\xe2\x2e\x1d\xbf\x8b\xb2\x52\x58\x43\x18\x98\x78\xa7\xcd" +
	"\x01\x7e\xf7\xa0\xde\xf7\x49\x5d\x9f\xe1\xa6\xc3\x25\x30\x00\x06\x87\x83\x97\xbd\x53\x5f\x85\xdb\x24\x29\x1c\x02" +
	"\xf3\x53\x31\x90\xe4\xd7\x75\x0f\x8c\xaa\xb7\xed\x1f\x9a\x3d\x47\x96\x95\x39\x35\xde\x63\xfe\xe8\x7e\x57\xa9\x9b" +
	"\xd9\xa9\xfb\xc1\xac\x21\xf4\x92\xfd\xde\xb1\xde\xf7\x28\xea\x48\x2e\x06\x49\xc2\xe5\x77\xb6\xa8\x17\x10\x80\x9c" +
	"\x4a\x2d\xcb\x6d\x79\x46\xd7\x92\xa6\x01\x85\x1a\xf8\x05\xde\x6f\xa5\xc5\x7c\xb0\xa2\xab\x77\xb1\xd5\x0b\x20\xfb" +
	"\x12\x62\xf3\xbf\x1d\x2a\x33\x10\xb6\xa8\xe1\xa6\x3b\xa6\x9d\xbd\x51\x34\x9e\x6c\xbf\x71\xf8\x47\x74\x97\x3e\x23" +
	"\x61\x21\x44\xe3\x43\x3f\x74\x5e\x42\xee\x72\x09\x8c\xf5\xf7\xf7\x05\x96\xfb\xd6\xce\xcd\x50\xf3\xb3\x76\x7d\xc1" +
	"\x23\xa9\x73\xfc\xce\xd2\xdb\x1b\x7f\xea\x6f\x43\x9d\xe0\x42\x14\x6d\xad\x22\x30\x21\xf5\xd0\xab\x46\xc6\xfa\xd9" +
	"\x0f\x19\xe3\xac\xc8\x19\x1c\x54\xa4\x81\x1f\x99\x67\xaa\x74\x00\x9b\x06\xe4\x1a\xf0\xbe\xcb\xe5\x9f\x35\xb0\x4a" +
	"\xb8\x0d\x1b\x53\x7c\xd7\x65\x37\x90\x35\xbf\xc0\x4a\x89\x0c\x93\xad\x55\x33\xf2\xf7\xae\xb9\x6b\x5b\xa2\x17\x0a" +
	"\x74\x93\xde\x34\x77\xed\x1d\x59\xee\x95\xbd\xa1\x38\x91\xbf\x9d\xc1\xdb\x74\x6c\xdd\xaf\xac\xe8\xd9\xc4\x45\x91" +
	"\xc5\xfb\x7e\x29\x1d\x2b\x89\xda\x71\xa2\x7b\x8a\x6e\x63\x28\x2b\x49\x69\x09\x12\x8a\xf4\x5f\xa4\x7e\xbf\x45\xfb" +
	"\x38\xe5\x4e\x28\x96\x60\xf1\x9e\xbf\xcb\xf3\xdf\x28\x1a\x86\xf5\xac\x5f\x75\x4f\xf8\x4d\xc9\xd1\xd6\x7a\xd6\x61" +
	"\x83\x22\x47\xfb\x62\x8b\x4f\x3e\xfc\xfa\x1e\x3f\x10\xf0\x9f\xb6\x93\x9f\xda\xdd\xf5\xf4\x9f\xe5\xb0\xa1\xce\xa4" +
	"\xf2\x7b\xa1\x47\x39\xa8\xb5\x5f\xa7\x57\x08\xb5\x2e\x1d\xbf\xac\xac\xd4\x6e\x9d\xb0\xff\x3e\xb0\xd9\x6e\xf3\x34" +
	"\x9d\xb4\x9a\x68\xf7\x82\x6a\xaf\x91\xed\xa7\x3a\x4e\x94\x8c\x5e\x56\x54\xae\x81\x1f\x0b\xfd\x49\x3c\xe0\xaf\x26" +
	"\x7f\x1c\x6f\x59\x99\xfc\x71\x06\x68\x6d\x3f\xb4\x1f\xd1\x51\x46\xc0\x74\x8a\xb9\x14\xdd\xe2\x9f\xf8\xb9\x67\x61" +
	"\xb5\xed\x62\x30\x98\x04\xb0\x96\x5c\xd1\x52\x8d\x56\x28\x53\xf0\x0f\xc2\x09\x95\xa4\xfc\xbd\xb5\x09\x5a\x9b\xf2" +
	"\xd3\xba\x48\xd8\xb5\x16\x2b\x85\xe0\x0c\x14\xe8\x80\x20\xf5\x0b\x6a\x58\x21\x54\x94\x02\x54\x75\xb2\xa8\xf6\xcb" +
	"\x79\x6c\xb4\x43\xed\x8e\x08\x39\x9b\xc1\x73\x2a\x29\x27\x8e\xdd\x4e\xa4\xb2\xe9\x8f\x15\xb4\x58\x57\x83\x4a\xd4" +
	"\xec\xc4\x24\xe3\x0a\xdd\x43\xf6\x65\xae\x24\x1b\xd6\x0e\xd6\x42\x2a\xcc\x7b\x9e\x7d\x23\x7a\x96\xe6\x98\x99\x1c" +
	"\x73\x90\xda\xa1\x5d\x8b\x0c\x9b\x76\xa7\x55\x67\xd4\xb5\x2e\x85\xad\x37\x42\x25\x01\xdd\x9b\xee\xbe\xf4\x97\x9f" +
	"\x03\x34\xd4\x51\xf4\xfe\x48\xb5\x8c\xae\xf1\x05\x7c\xd4\xf8\x83\xb1\xa5\x70\x0e\x6d\xf7\x29\xe9\x1b\xfb\x94\x36" +
	"\xbc\xdc\xd1\x1f\x7a\xf7\x22\x5b\xba\xa7\x15\x3d\xc0\xd2\xf8\x35\x2f\x20\x59\x99\xf3\x0f\x4a\x14\x75\x92\xf2\x60" +
	"\xd2\xef\xc2\x7e\x4d\xde\xec\x1c\x83\xe0\x6b\xad\xb6\xc5\xf4\xec\xb0\xfe\x77\xff\x3b\xd3\xee\x99\x69\xc9\xc4\xf1" +
	"\x42\x1b\xff\x1d\x00\x00\xff\xff\xb1\x7b\x94\xdd\xc3\x0c\x00\x00")

func bindataTemplatesCommandstmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatesCommandstmpl,
		"templates/commands.tmpl",
	)
}



func bindataTemplatesCommandstmpl() (*asset, error) {
	bytes, err := bindataTemplatesCommandstmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/commands.tmpl",
		size: 3267,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1538628562, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplatesMaintmpl = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8e\x41\x4b\xc3\x40\x10\x85\xcf\x3b\xbf\x62\xc8\x41\x12\xb0\x9b\x7a" +
	"\xed\xad\x68\x0e\x5e\xac\x88\x78\x5f\x37\x93\xed\x60\x76\x66\xd9\x6c\x4a\x25\xe4\xbf\x4b\x2a\xe2\xed\xbd\xf7\xf1" +
	"\x1e\x2f\x39\xff\xe5\x02\x61\x74\x2c\x00\x1c\x93\xe6\x82\x35\x98\x2a\x70\x39\xcf\x9f\xd6\x6b\x6c\x7b\x27\x4c\x63" +
	"\x28\xee\x7b\xd4\xdc\x6a\x22\x71\x89\x77\x7e\xe4\x5d\x20\xa1\xec\x8a\xe6\xd6\x8f\x5c\x41\x03\x30\xcc\xe2\x6f\x63" +
	"\x75\x83\x0b\x18\x3f\xb2\x7d\x16\x2e\xf5\xdd\xa6\x1e\x55\x06\x0e\x0b\x18\x73\x4c\xe9\xc5\x45\x3a\x20\x62\xb5\x2c" +
	"\x68\x37\x83\xeb\x5a\xdd\x83\x31\x9d\x5c\x5e\x33\x0d\x7c\x3d\xfc\xb3\x4e\x2e\x7f\xf8\x83\xf2\xc4\x2a\xb7\xea\x83" +
	"\xdd\xdb\xfd\x96\xae\x0d\x80\x69\x5b\x7c\x3f\x3d\x9d\x0e\x78\xec\x7b\xcc\x14\x78\x2a\x94\xd1\x6b\x8c\x4e\xfa\x09" +
	"\xcf\x94\xc9\xc2\xef\xa7\x37\xd5\x62\xbb\x2b\xf9\xb9\x50\xdd\xc0\x0a\x3f\x01\x00\x00\xff\xff\xd7\x90\x9c\xb4\x08" +
	"\x01\x00\x00")

func bindataTemplatesMaintmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatesMaintmpl,
		"templates/main.tmpl",
	)
}



func bindataTemplatesMaintmpl() (*asset, error) {
	bytes, err := bindataTemplatesMaintmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/main.tmpl",
		size: 264,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1538448749, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"templates/commands.tmpl": bindataTemplatesCommandstmpl,
	"templates/main.tmpl":     bindataTemplatesMaintmpl,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"templates": {Func: nil, Children: map[string]*bintree{
		"commands.tmpl": {Func: bindataTemplatesCommandstmpl, Children: map[string]*bintree{}},
		"main.tmpl": {Func: bindataTemplatesMaintmpl, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
